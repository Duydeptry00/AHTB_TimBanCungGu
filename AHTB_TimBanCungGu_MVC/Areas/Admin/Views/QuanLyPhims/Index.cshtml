@model IEnumerable<AHTB_TimBanCungGu_API.Models.Phim>

@{
    ViewData["Title"] = "Quản Lý Phim";
    Layout = "~/Areas/Admin/Views/SharedAdmin/_LayoutAdmin.cshtml";
}

<style>
    /* Nền tổng thể tối */
    .dark-background {
        margin: 15px;
        background-color: #0d1b2a; /* Màu xanh tối dịu mắt */
        color: #ffffff; /* Chữ sáng */
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 10px rgba(0, 0, 0, 0.6); /* Hiệu ứng đổ bóng nhẹ */
    }

    /* Bảng */
    .table-dark {
        border-collapse: collapse;
        width: 100%;
        color: #ffffff; /* Chữ bảng */
        background-color: #1a2b3c; /* Nền bảng xanh đậm */
    }

        .table-dark th {
            background-color: #2c3e50; /* Nền tiêu đề bảng tối hơn */
            color: #ffffff;
            padding: 12px;
            text-align: center;
            border-bottom: 2px solid #3b4f63; /* Viền tiêu đề bảng */
        }

        .table-dark td {
            padding: 12px;
            text-align: center;
            border-bottom: 1px solid #3b4f63; /* Viền giữa các ô */
            background-color: #243447; /* Tông nền xen kẽ dịu mắt */
        }

        .table-dark tr:nth-child(even) td {
            background-color: #1c2833; /* Xen kẽ màu tối hơn */
        }

    /* Nút thêm mới */
    #addNewBtn {
        background-color: #198754; /* Màu xanh lá đậm */
        color: #ffffff;
        border: none;
        transition: background-color 0.3s ease;
    }

        #addNewBtn:hover {
            background-color: #157347; /* Màu hover */
            color: #ffffff;
        }

    /* Trường tìm kiếm */
    #searchInput {
        background-color: #243447; /* Nền tối hơn */
        color: #ffffff; /* Chữ sáng */
        border: 1px solid #3b4f63; /* Viền */
        border-radius: 5px;
        padding: 0.5em;
    }

        #searchInput:focus {
            outline: none;
            border-color: #66e; /* Hiệu ứng khi focus */
            box-shadow: 0 0 5px rgba(102, 140, 255, 0.7);
        }


    /* Cuộn bảng */
    .table-wrapper {
        max-height: 400px;
        overflow-y: auto;
        border: 1px solid #3b4f63;
        border-radius: 5px;
    }

    /* Hiệu ứng khi di chuột lên hàng */
    .table-dark tr:hover {
        background-color: #345678; /* Tông sáng hơn */
    }

    /* Checkbox */
    .genre-checkbox {
        accent-color: #66e; /* Màu chọn */
    }


    .filter-section {
        background-color: #1e1e1e;
        padding: 15px;
        border-radius: 10px;
    }

    #searchInput {
        background-color: #1e1e1e;
        color: #fff;
        border: 1px solid #555;
    }
    .container {
        position: relative;
        display: block;
        width: 600px;
    }

    details {
        position: relative;
        width: auto;
        height: auto;
        overflow: hidden;
        max-height: 2.5em !important;
        transition: all 0.1s ease;
    }

        details > summary {
            position: relative;
            margin-top: 0.25em;
            color: #99e;
            padding: 0.1em 0.5em 0.2em;
            background: #333;
            border-radius: 5px;
        }

            details > summary:before {
                color: #eee;
                font-size: 0.5em;
                margin-right: 0.5em;
            }

        details[open] > summary {
            background: #444;
            color: #fff;
        }

            details[open] > summary:before {
                color: #ccc;
            }

    .folder {
        margin: 0 0 0.5em 0.86em;
        padding: 0.1em 0em 0.1em 2.5em;
        border-left: 0.1em #666 dotted;
        border-bottom: 0.1em #666 dotted;
    }

    details[open] {
        height: auto;
        max-height: 99em !important;
        transition: all 1.2s ease;
    }

    details:not([open]) .folder {
        height: 0px !important;
    }

    /* Styling for select dropdown */
    select, option {
        background-color: #333;
        color: #eee;
        border: 1px solid #555;
        padding: 0.5em;
        width: 100%;
        margin-bottom: 1em;
        border-radius: 5px;
    }

        select:focus {
            outline: none;
            border-color: #66e;
            box-shadow: 0 0 5px rgba(102, 140, 255, 0.7);
        }

    option {
        background-color: #333;
    }

        option:hover {
            background-color: #444;
        }

    .btn-outline-light.active {
        background-color: #fff;
        color: #000;
        border-color: #66e;
    }

    /* Updated Style for filter section */
    .filter-section {
        display: flex;
        justify-content: space-between; /* This will space the filters out horizontally */
        flex-wrap: wrap; /* Allows wrapping to the next line if space is insufficient */
        margin-bottom: 1.5em;
    }

    .filter-item {
        margin-right: 1em; /* Add space between filter items */
        margin-bottom: 1em; /* Add bottom margin for spacing if needed */
        width: calc(33.33% - 1em); /* Ensure each filter takes 1/3 of the available width */
    }

        .filter-item:last-child {
            margin-right: 0; /* No margin for the last item */
        }

    /* Table Styling */
    .table {
        table-layout: fixed;
    }

    /* Scrollable Table Wrapper */
    .table-wrapper {
        max-height: 400px;
        overflow-y: auto;
    }
    /* Updated style for active button */
    .btn-outline-light.active {
        background-color: #000; /* Light blue background for selected filter */
        color: #fff; /* White text for selected filter */
        border-color: #000; /* Light blue border for selected filter */
    }
</style>

<div class="dark-background">
    <div class="row mb-3">
        <!-- Filter Section -->
        <div class="col-md-7">
            <details open>
                <summary><strong>Lọc phim</strong></summary>
                <div class="folder mt-3">
                    <div class="filter-section">
                        <!-- Dạng Phim Filter -->
                        <div class="filter-item">
                            <h5 class="form-label text-light">Dạng Phim</h5>
                            <div id="typeFilter" class="btn-group d-flex flex-column">
                                <a href="javascript:void(0);" onclick="setTypeFilter('')" class="btn btn-outline-light">Tất Cả Dạng Phim</a>
                                <div class="btn-group d-flex">
                                    <a href="javascript:void(0);" onclick="setTypeFilter('Phim Bộ')" class="btn btn-outline-light me-2">Phim Bộ</a>
                                    <a href="javascript:void(0);" onclick="setTypeFilter('Phim Lẻ')" class="btn btn-outline-light">Phim Lẻ</a>
                                </div>
                            </div>
                        </div>

                        <!-- Thể Loại Filter -->
                        <div class="filter-item">
                            <h5 class="form-label text-light">Thể Loại</h5>
                            <div id="genreFilter" class="btn-group d-flex flex-column">
                                <a href="javascript:void(0);" onclick="setGenreFilter('')" class="btn btn-outline-light">Tất Cả Thể Loại</a>

                                <!-- Displaying the first 3 genres initially -->
                                <div id="initialGenres" class="initial-genres">
                                    @foreach (var genre in (ViewData["Genres"] as List<string>).Take(3))
                                    {
                                        <label class="btn btn-outline-light">
                                            <input type="checkbox" class="genre-checkbox" value="@genre" onchange="filterTable()" />
                                            @genre
                                        </label>
                                    }
                                </div>

                                <!-- The "Xem thêm" link that will show more genres -->
                                <div id="moreGenres" class="more-genres" style="display: none;">
                                    @foreach (var genre in (ViewData["Genres"] as List<string>).Skip(3))
                                    {
                                        <label class="btn btn-outline-light">
                                            <input type="checkbox" class="genre-checkbox" value="@genre" onchange="filterTable()" />
                                            @genre
                                        </label>
                                    }
                                </div>

                                <!-- Toggle visibility for more genres -->
                                <a href="javascript:void(0);" class="btn btn-outline-light" id="showMoreGenres" onclick="toggleGenres()">Xem Thêm</a>
                            </div>
                        </div>

                        <!-- Premium Filter -->
                        <div class="filter-item">
                            <h5 class="form-label text-light">Premium</h5>
                            <div id="premiumFilter" class="btn-group d-flex flex-column">
                                <a href="javascript:void(0);" onclick="setPremiumFilter('Premium')" class="btn btn-outline-light">Premium</a>
                            </div>
                        </div>
                    </div>
                </div>
            </details>
        </div>

        <div class="col-md-3">
            <input type="text" id="searchInput" class="form-control" placeholder="Tìm kiếm phim theo tên..." onkeyup="filterTable()" />
        </div>

        <!-- Nút Thêm Mới nằm ở ngoài -->
        <div class="col-md-2 text-end" id="addNewBtnContainer">
            <a asp-action="Create" class="btn btn-success" id="addNewBtn">
                <i class="fas fa-plus"></i> Thêm Mới
            </a>
        </div>
    </div>

    <!-- Scrollable Table Wrapper -->
    <div class="table-wrapper">
        <table class="table table-striped table-hover table-bordered text-center align-middle table-dark text-light" id="movieTable">
            <thead>
                <tr>
                    <th><i class="fas fa-film"></i> Tên Phim</th>
                    <th><i class="fas fa-user"></i> Diễn Viên</th>
                    <th><i class="fas fa-list"></i> Thể Loại</th>
                    <th><i class="fas fa-calendar-alt"></i> Ngày Cập Nhật</th>
                    <th><i class="fas fa-video"></i> Dạng Phim</th>
                    <th><i class="fas fa-image"></i> Hình Ảnh Phim</th>
                    <th><i class="fas fa-eye"></i> Premium</th>
                    <th><i class="fas fa-cogs"></i> Thao Tác</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.TenPhim)</td>
                        <td>@Html.DisplayFor(modelItem => item.DienVien)</td>
                        <td>@Html.DisplayFor(modelItem => item.TheLoai.TenTheLoai)</td>
                        <td>@item.NgayPhatHanh.ToString("dd/MM/yyyy")</td>
                        <td>@Html.DisplayFor(modelItem => item.DangPhim)</td>
                        <td>
                            <img src="~/Uploads/@item.HinhAnh" alt="Movie Image" class="rounded" style="width: 100px; height: auto;" />
                        </td>
                        <td>
                            @if (item.NoiDungPremium == true)
                            {
                                <span class="badge bg-warning text-dark">Premium</span>
                            }
                            else
                            {
                                <span class="badge bg-secondary">Không</span>
                            }
                        </td>
                        <td>
                            <a asp-action="Edit" asp-route-id="@item.IDPhim" class="btn btn-primary btn-sm me-1">
                                <i class="fas fa-edit"></i>
                            </a>
                            <a asp-action="Details" asp-route-id="@item.IDPhim" class="btn btn-info btn-sm me-1">
                                <i class="fas fa-info-circle"></i>
                            </a>
                            <a asp-action="Delete" asp-route-id="@item.IDPhim" class="btn btn-danger btn-sm" onclick="return confirm('Bạn có chắc chắn muốn xóa phim này?');">
                                <i class="fas fa-trash-alt"></i>
                            </a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

<script>
    function toggleGenres() {
        const moreGenres = document.getElementById('moreGenres');
        const showMoreGenres = document.getElementById('showMoreGenres');
        if (moreGenres.style.display === 'none') {
            moreGenres.style.display = 'block';
            showMoreGenres.innerText = 'Ẩn bớt'; // Change to "Hide" when showing more genres
        } else {
            moreGenres.style.display = 'none';
            showMoreGenres.innerText = 'Xem thêm'; // Change back to "See More" when hiding genres
        }
    }

    function setTypeFilter(type) {
        // Set the type filter
        window.currentTypeFilter = type;
        filterTable(); // Reapply the filtering
        // Highlight the selected filter link
        const typeFilterLinks = document.querySelectorAll("#typeFilter .btn");
        typeFilterLinks.forEach(link => {
            if (link.textContent.toUpperCase() === type.toUpperCase()) {
                link.classList.add("active");
            } else {
                link.classList.remove("active");
            }
        });
    }

    function setPremiumFilter(isPremium) {
        // Kiểm tra nếu đang lọc theo "Premium", thì bỏ lọc và hiển thị tất cả
        if (window.currentPremiumFilter === isPremium) {
            window.currentPremiumFilter = undefined;  // Bỏ lọc khi nhấn lại vào Premium
        } else {
            window.currentPremiumFilter = isPremium;  // Áp dụng lọc Premium
        }

        filterTable(); // Reapply the filtering

        // Highlight the selected filter link
        const premiumFilterLinks = document.querySelectorAll("#premiumFilter .btn");
        premiumFilterLinks.forEach(link => {
            if (link.textContent.trim().toUpperCase() === isPremium.toUpperCase() && window.currentPremiumFilter === isPremium) {
                link.classList.add("active");
            } else {
                link.classList.remove("active");
            }
        });
    }


    function filterTable() {
        const input = document.getElementById("searchInput");
        const filter = input.value.toLowerCase();
        const selectedGenres = Array.from(document.querySelectorAll('.genre-checkbox:checked')).map(checkbox => checkbox.value.toLowerCase());
        const table = document.getElementById("movieTable");
        const tr = table.getElementsByTagName("tr");

        for (let i = 1; i < tr.length; i++) {
            let tdMovieName = tr[i].getElementsByTagName("td")[0]; // Movie name column
            let tdGenres = tr[i].getElementsByTagName("td")[2]; // Genres column
            let tdType = tr[i].getElementsByTagName("td")[4]; // Movie type column
            let tdPremium = tr[i].getElementsByTagName("td")[6]; // Premium column
            let movieName = tdMovieName ? tdMovieName.textContent || tdMovieName.innerText : "";
            let genres = tdGenres ? tdGenres.textContent || tdGenres.innerText : "";
            let movieType = tdType ? tdType.textContent || tdType.innerText : "";
            let isPremium = tdPremium ? tdPremium.textContent || tdPremium.innerText : "";

            let showRow = true;

            // Check if the movie name matches the search filter
            if (movieName.toLowerCase().indexOf(filter) === -1) {
                showRow = false;
            }

            // Check if any selected genre matches
            if (selectedGenres.length > 0) {
                const genreMatches = selectedGenres.some(genre => genres.toLowerCase().includes(genre));
                if (!genreMatches) {
                    showRow = false;
                }
            }

            // Check if the type filter matches
            if (window.currentTypeFilter && movieType.toLowerCase() !== window.currentTypeFilter.toLowerCase()) {
                showRow = false;
            }

            // Check if the premium filter matches
            if (window.currentPremiumFilter !== undefined) {
                // Adjust the comparison to check against "Premium" or "Free" directly
                if (window.currentPremiumFilter === 'Premium' && !isPremium.toLowerCase().includes('premium')) {
                    showRow = false;
                } else if (window.currentPremiumFilter === 'Free' && isPremium.toLowerCase().includes('premium')) {
                    showRow = false;
                }
            }

            // Show or hide row based on the filter conditions
            tr[i].style.display = showRow ? "" : "none";
        }
    }
</script>

