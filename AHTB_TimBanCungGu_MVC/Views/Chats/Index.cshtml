@model List<AHTB_TimBanCungGu_API.Chats.ConversationVM>
@{
    ViewData["Title"] = "Danh sách cuộc trò chuyện";
    Layout = null;
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<!-- Giao diện chính -->
<div class="messenger-container">
    <!-- Danh sách cuộc trò chuyện -->
    <div class="conversations-list">
        <h3>Danh sách cuộc trò chuyện</h3>
        <!-- Danh sách trò chuyện sẽ được thêm vào đây -->
    </div>

    <!-- Cửa sổ trò chuyện -->
    <div class="chat-window">
        <div class="chat-header">
            <span id="chatTitle">Chọn cuộc trò chuyện để bắt đầu</span>
        </div>
        <div class="chat-body" id="chatBody">
            <!-- Tin nhắn sẽ được thêm vào đây -->
        </div>
        <div class="chat-footer">
            <textarea id="messageContent" placeholder="Gõ tin nhắn..."></textarea>
            <button onclick="sendMessage()" style="background: none; border: none; cursor: pointer;">
                <i class="fas fa-paper-plane" style="font-size: 24px; color: #0078D4;"></i>
            </button>
        </div>
    </div>
</div>

<style>
    /* Cấu hình cơ bản cho toàn bộ trang */
    html, body {
        margin: 0;
        padding: 0;
        overflow: hidden;
        height: 100%;
    }

    /* Phần chứa chính của messenger */
    .messenger-container {
        display: flex;
        height: 100vh;
    }

    /* Danh sách cuộc trò chuyện */
    .conversations-list {
        width: 30%;
        padding: 10px;
        border-right: 1px solid #ddd;
        overflow-y: auto; /* Thanh cuộn dọc nếu cần */
        height: 100%; /* Chiếm toàn bộ chiều cao */
    }

    /* Mỗi mục cuộc trò chuyện */
    .conversation-item {
        padding: 10px;
        border-bottom: 1px solid #ddd;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

        .conversation-item:hover {
            background-color: #f5f5f5;
        }

    /* Cửa sổ trò chuyện */
    .chat-window {
        width: 70%;
        display: flex;
        flex-direction: column;
    }

    /* Đầu của cửa sổ trò chuyện */
    .chat-header {
        background-color: #0078D4;
        color: white;
        padding: 10px;
        font-size: 18px;
    }

    /* Phần nội dung của cửa sổ trò chuyện */
    .chat-body {
        flex-grow: 1;
        padding: 10px;
        background-color: #f0f0f0;
        overflow-y: auto; /* Thanh cuộn dọc nếu cần */
        height: calc(100% - 50px); /* Để lại khoảng trống cho phần footer */
    }

        /* Thanh cuộn của chat-body */
        .chat-body::-webkit-scrollbar {
            width: 8px; /* Chiều rộng của thanh cuộn dọc */
            height: 8px; /* Chiều cao của thanh cuộn ngang */
        }

        .chat-body::-webkit-scrollbar-track {
            background: transparent; /* Nền trong suốt */
        }

        .chat-body::-webkit-scrollbar-thumb {
            background: #0078D4; /* Màu của thanh cuộn */
            border-radius: 10px; /* Bo tròn các góc */
            border: 2px solid transparent; /* Đường viền trong suốt */
        }

        .chat-body::-webkit-scrollbar-corner {
            display: none; /* Ẩn phần giao nhau */
        }

        .chat-body::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        /* Ẩn các mũi tên cuộn (trong trường hợp có) */
        .chat-body::-webkit-scrollbar-button {
            display: none; /* Ẩn các nút cuộn */
        }
    .chat-body {
        scrollbar-width: thin; /* Thanh cuộn mỏng */
        scrollbar-color: #0078D4 transparent; /* Màu thanh cuộn và nền */
    }

    /* Phần footer của cửa sổ trò chuyện */
    .chat-footer {
        padding: 10px;
        display: flex;
        align-items: center;
    }

        /* Ô nhập liệu */
        .chat-footer textarea {
            width: 100%;
            height: 50px;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
            margin-right: 10px;
        }

        /* Nút gửi */
        .chat-footer button {
            padding: 10px 20px;
            background-color: #0078D4;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            .chat-footer button:hover {
                background-color: #005a8e; /* Hiệu ứng khi hover */
            }

    /* Tin nhắn của người dùng và người nhận */
    .user-message, .receiver-message {
        padding: 5px;
        margin: 5px 0;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
    }

    /* Tên người gửi */
    .message-sender {
        font-weight: bold;
        margin-bottom: 3px;
    }

    /* Tin nhắn của người dùng */
    .user-message {
        text-align: right;
        background-color: #d0f0c0;
    }

    /* Tin nhắn của người nhận */
    .receiver-message {
        text-align: left;
        background-color: #f0f0f0;
    }

    /* Thời gian tin nhắn chung */
    .message-timestamp {
        font-size: 12px;
        color: #888;
        margin-top: 5px;
    }

    /* Đối với tin nhắn của người nhận */
    .receiver-message .message-timestamp {
        text-align: left; /* Canh trái */
    }

    .container {
        display: flex;
        justify-content: center; /* Căn giữa theo chiều ngang */
        margin: 10px 0; /* Khoảng cách trên dưới */
    }

    .date-separator {
        text-align: center;
        padding: 5px 10px;
        font-size: 14px;
        color: white;
        background-color: #80808075; /* Nền xám */
        border-radius: 10px;
        font-weight: bold;
    }


</style>

<script>
    let currentConversation = null;
    let sendUser = '@ViewBag.CurrentUser';  // Thêm tên người dùng vào ViewBag

    // Khởi tạo kết nối WebSocket
    const socket = new WebSocket('http://localhost:60771/Chats/ConnectWebSocket');  // Đảm bảo URL WebSocket chính xác

    // Khi kết nối WebSocket thành công
    socket.onopen = function () {
        console.log("WebSocket connected.");
    };
    // When a message is received from the WebSocket
    socket.onmessage = function (event) {
        const message = JSON.parse(event.data);  // Parse JSON from server
        const chatBody = document.getElementById("chatBody");

        // Check if the message belongs to the current conversation
        if (message.receiverUsername === currentConversation || message.senderUsername === currentConversation) {
            // Create a container for the message
            let messageContainer = document.createElement("div");
            messageContainer.classList.add(message.senderUsername === sendUser ? "user-message" : "receiver-message");

            // Create the sender's name element
            let senderNameElement = document.createElement("div");
            senderNameElement.classList.add("message-sender");
            senderNameElement.innerText = message.senderName;

            // Create the message content element
            let messageContentElement = document.createElement("div");
            messageContentElement.innerText = message.content;

            // Create the timestamp element
            let messageTimestampElement = document.createElement("div");
            messageTimestampElement.classList.add("message-timestamp");

            // Format the timestamp
            const messageTime = new Date(message.timestamp); // Assuming `message.timestamp` is an ISO string
            messageTimestampElement.innerText = messageTime.toLocaleTimeString([], {
                hour: '2-digit',
                minute: '2-digit'
            });

            // Append the sender's name, message content, and timestamp to the container
            messageContainer.appendChild(senderNameElement);
            messageContainer.appendChild(messageContentElement);
            messageContainer.appendChild(messageTimestampElement);

            // Append the message container to the chat body
            chatBody.appendChild(messageContainer);

            // Scroll to the bottom of the chat body when a new message is added
            chatBody.scrollTop = chatBody.scrollHeight;
        }

        // Optionally reload conversations and messages
        loadConversations();
        loadMessages(currentConversation);
    };

    // Khi WebSocket đóng
    socket.onclose = function () {
        console.log("WebSocket closed.");
    };

    // Khi có lỗi với WebSocket
    socket.onerror = function (error) {
        console.log("WebSocket Error: " + error);
    };

    // Modify the openConversation function to show the chat footer
    function openConversation(user2, hoten) {
        currentConversation = user2;
        document.getElementById("chatTitle").innerText = "Cuộc trò chuyện với: " + hoten;

        // Xóa nội dung tin nhắn cũ
        document.getElementById("chatBody").innerHTML = '';
        // Mở API lấy tin nhắn cho user2
        loadMessages(user2, hoten);

        // Show the chat footer when a conversation is opened
        toggleChatFooter(true);
    }
    window.onload = function () {
        toggleChatFooter(false); // Hide chat footer by default
    };
    // Thêm sự kiện lắng nghe cho ô nhập liệu để xử lý Enter và Shift + Enter
    document.getElementById("messageContent").addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
            if (event.shiftKey) {
                // Nếu nhấn Shift + Enter, cho phép xuống dòng
                return;
            }
            // Nếu nhấn Enter mà không giữ Shift, gọi hàm gửi tin nhắn
            event.preventDefault(); // Ngăn chặn hành động mặc định của Enter (ví dụ: gửi form)
            sendMessage();
        }
    });
    // Function to toggle the visibility of the chat footer
    function toggleChatFooter(isVisible) {
        const chatFooter = document.querySelector('.chat-footer');
        if (isVisible) {
            chatFooter.style.display = 'flex';
        } else {
            chatFooter.style.display = 'none';
        }
    }
    function loadMessages(user2) {
        if (user2) {
            // Fetch messages from the server for the selected user
            fetch(`/Chats/GetMessages?receiverUsername=${user2}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Clear the chat body to prepare for new messages
                        const chatBody = document.getElementById("chatBody");
                        chatBody.innerHTML = ''; // Remove old messages

                        // Helper function to format the date
                        function getDateLabel(date) {
                            const today = new Date();
                            const yesterday = new Date(today);
                            yesterday.setDate(today.getDate() - 1);

                            today.setHours(0, 0, 0, 0);
                            yesterday.setHours(0, 0, 0, 0);

                            const dateOnly = new Date(date);
                            dateOnly.setHours(0, 0, 0, 0);

                            if (dateOnly.getTime() === today.getTime()) {
                                return "Hôm nay";
                            } else if (dateOnly.getTime() === yesterday.getTime()) {
                                return "Hôm qua";
                            } else {
                                return `${getShortDayName(dateOnly)} ${dateOnly.toLocaleDateString('vi-VN', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: '2-digit'
                                })}`;
                            }
                        }

                        // Helper function to get short day names
                        function getShortDayName(date) {
                            const dayNames = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
                            return dayNames[date.getDay()];
                        }

                        // Check if there are messages to display
                        if (Array.isArray(data.messages) && data.messages.length > 0) {
                            console.log(data.messages);

                            let lastMessageDate = null; // To keep track of the last message date

                            // Loop through each message and create corresponding elements
                            data.messages.forEach(message => {
                                const messageDate = new Date(message.timestamp);

                                // Check if the current message date is a different day from the last message
                                if (!lastMessageDate || messageDate.toDateString() !== lastMessageDate.toDateString()) {
                                    const containerDiv = document.createElement("div");
                                    containerDiv.classList.add("container");

                                    const dateSeparator = document.createElement("div");
                                    dateSeparator.classList.add("date-separator");
                                    dateSeparator.innerText = getDateLabel(message.timestamp);

                                    containerDiv.appendChild(dateSeparator);
                                    chatBody.appendChild(containerDiv);

                                    lastMessageDate = messageDate;
                                }

                                const messageContainer = document.createElement("div");
                                messageContainer.classList.add(
                                    message.senderUsername === sendUser ? "user-message" : "receiver-message"
                                );

                                // Create message content element
                                const messageContentElement = document.createElement("div");
                                messageContentElement.innerText = message.content;

                                // Create message timestamp element
                                const messageTimestampElement = document.createElement("div");
                                messageTimestampElement.classList.add("message-timestamp");
                                messageTimestampElement.innerText = messageDate.toLocaleTimeString([], {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                });

                                // If the message is from the receiver, include their name
                                if (message.senderUsername !== sendUser) {
                                    const senderNameElement = document.createElement("div");
                                    senderNameElement.classList.add("message-sender");
                                    senderNameElement.innerText = message.receiverName; // Adjust to correct name
                                    messageContainer.appendChild(senderNameElement);
                                }

                                // Append message content and timestamp to the container
                                messageContainer.appendChild(messageContentElement);
                                messageContainer.appendChild(messageTimestampElement);

                                // Add the container to the chat body
                                chatBody.appendChild(messageContainer);
                            });

                            // Scroll to the bottom of the chat body
                            chatBody.scrollTop = chatBody.scrollHeight;
                        } else {
                            // If no messages are found, show a placeholder
                            console.log("No messages available.");
                            const noMessagesElement = document.createElement("div");
                            noMessagesElement.classList.add("no-messages");
                            noMessagesElement.innerText = "Chưa có tin nhắn nào trong cuộc trò chuyện này.";
                            chatBody.appendChild(noMessagesElement);
                        }
                    } else {
                        console.error("Error loading messages:", data.message);
                    }
                })
                .catch(error => {
                    console.error("Error loading messages:", error);
                });
        } else {
            console.error("Invalid user2.");
        }
    }




    // Function to load conversation list from the API
    function loadConversations() {
        fetch(`/Chats/GetConversation?username=${sendUser}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    console.log(data);
                    const conversationList = document.querySelector('.conversations-list');
                    conversationList.innerHTML = ''; // Clear existing conversation list

                    // Thêm tiêu đề "Danh sách cuộc trò chuyện"
                    const titleElement = document.createElement('h3');
                    titleElement.innerText = "Danh sách cuộc trò chuyện";
                    conversationList.appendChild(titleElement);

                    // Thêm các mục trò chuyện
                    data.conversations.forEach(conversation => {
                        // Xác định tên hiển thị của người đối thoại
                        const otherUser = sendUser === conversation.user1 ? conversation.hotenuser2 : conversation.hotenuser1;
                        const otherUsername = sendUser === conversation.user1 ? conversation.user2 : conversation.user1;

                        // Tạo phần tử cho mỗi cuộc trò chuyện
                        const conversationItem = document.createElement('div');
                        conversationItem.classList.add('conversation-item');
                        conversationItem.innerHTML = `
                            <strong>${otherUser}</strong>
                            <p>${conversation.contentnew}</p>
                            <small>${new Date(conversation.lastMessageTimestamp).toLocaleString()}</small>
                        `;

                        // Gắn sự kiện onclick để mở cuộc trò chuyện khi được nhấn
                        conversationItem.onclick = () => openConversation(otherUsername, otherUser);

                        // Thêm mục này vào danh sách
                        conversationList.appendChild(conversationItem);
                    });
                } else {
                    console.error("Failed to load conversations:", data.message);
                }
            })
            .catch(error => {
                console.error("Error loading conversations:", error);
            });
    }



    // Gọi loadConversations khi trang tải
    window.onload = function () {
        loadConversations(); // Load danh sách cuộc trò chuyện
        toggleChatFooter(false); // Ẩn footer cửa sổ chat mặc định
    };

    // Gửi tin nhắn qua WebSocket
    async function sendMessage() {
        let messageContent = document.getElementById("messageContent").value;

        // Gửi tin nhắn qua WebSocket
        const message = {
            senderUsername: sendUser,  // Thay thế với thông tin người dùng thực tế
            receiverUsername: currentConversation,
            content: messageContent,
            timestamp: new Date().toISOString()  // Thời gian hiện tại
        };

        socket.send(JSON.stringify(message));  // Gửi tin nhắn tới server qua WebSocket

        // Hiển thị tin nhắn đã gửi trong cửa sổ trò chuyện
        let chatBody = document.getElementById("chatBody");
        let messageContainer = document.createElement("div");
        messageContainer.classList.add("user-message");

        // Tạo phần tử hiển thị nội dung tin nhắn
        let messageContentElement = document.createElement("div");
        messageContentElement.innerText = messageContent;

        // Tạo phần tử hiển thị thời gian tin nhắn
        let messageTimestampElement = document.createElement("div");
        messageTimestampElement.classList.add("message-timestamp");
        const messageTime = new Date(message.timestamp);
        messageTimestampElement.innerText = messageTime.toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit'
        });

        // Thêm các phần tử vào container tin nhắn
        messageContainer.appendChild(messageContentElement);
        messageContainer.appendChild(messageTimestampElement);

        // Thêm container tin nhắn vào phần tử chat body
        chatBody.appendChild(messageContainer);

        // Cuộn tới cuối cùng khi có tin nhắn mới
        chatBody.scrollTop = chatBody.scrollHeight;

        // Xóa nội dung tin nhắn trong textarea
        document.getElementById("messageContent").value = '';

        // Tải lại danh sách cuộc trò chuyện
        loadConversations();
    }
</script>
