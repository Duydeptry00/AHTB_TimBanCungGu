@model List<AHTB_TimBanCungGu_API.Chats.ConversationVM>
@{
    ViewData["Title"] = "Danh sách cuộc trò chuyện";
    Layout = null;
}
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">

<!-- Giao diện chính -->
<div class="messenger-container">
    <!-- Danh sách cuộc trò chuyện -->
    <div class="conversations-list">
        <h3>Danh sách cuộc trò chuyện</h3>
        <div id="conversationList" class="conversation-list">
            <!-- Danh sách trò chuyện sẽ được thêm vào đây -->
        </div>
        <a href="/TimBanCungGu/TrangChu" class="back-to-home">Quay lại trang chủ</a>    
    </div>

    <!-- Cửa sổ trò chuyện -->
    <div class="chat-window">
        <div class="chat-header ">
            <div id="chatHeader"></div>
            <span id="chatTitle">Chọn cuộc trò chuyện để bắt đầu</span>
        </div>
        <a href="/TimBanCungGu/TrangChu"></a>
        <div class="chat-body" id="chatBody">
            <!-- Tin nhắn sẽ được thêm vào đây -->
        </div>
        <div class="chat-footer">
            <div id="chat">
                <textarea id="messageContent" placeholder="Gõ tin nhắn..."></textarea>
                <button onclick="sendMessage()" style="background: none; border: none; cursor: pointer;">
                    <i class="fas fa-paper-plane" style="font-size: 24px; color: #0078D4;"></i>
                </button>
            </div>
            <div id="blockuser">
                <p id="blockMessage"></p>
            </div>
        </div>
    </div>
</div>

<style>
    /* Cấu hình cơ bản cho toàn bộ trang */
    html, body {
        margin: 0;
        padding: 0;
        overflow: hidden;
        height: 100%;
        font-family: 'Roboto', 'Segoe UI', Arial, sans-serif;
    }

    /* Phần chứa chính của messenger */
    .messenger-container {
        display: flex;
        height: 100vh;
    }

    /* Danh sách cuộc trò chuyện */
    .conversations-list {
        width: 380px;
        padding: 10px;
        border-right: 1px solid #ddd;
        height: 100%; /* Chiếm toàn bộ chiều cao */
        background-color: #f9f9f9; /* Nền màu sáng */
        overflow: hidden; /* Ẩn thanh cuộn của toàn bộ container */
    }

        /* Tiêu đề danh sách cuộc trò chuyện */
        .conversations-list h3 {
            font-size: 18px;
            color: #333;
            margin-bottom: 15px;
            text-align: center;
            font-weight: bold;
        }

    /* Phần tử cho mỗi mục trò chuyện */
    .conversation-item {
        display: flex;
        align-items: flex-start;
        padding: 10px;
        border-bottom: 1px solid #ddd;
        cursor: pointer;
        transition: background-color 0.3s ease;
        background-color: #fff;
        border-radius: 5px;
        margin-bottom: 10px;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.05);
        position: relative;
    }

        /* Hiệu ứng hover cho mục trò chuyện */
        .conversation-item:hover {
            background-color: #f5f5f5;
        }

    /* Ảnh đại diện */
    .conversation-avatar {
        margin-right: 10px;
        flex-shrink: 0; /* Không co giãn khi không gian nhỏ */
    }

    .avatar-image {
        width: 50px;
        height: 50px;
        border-radius: 50%; /* Hình tròn */
        object-fit: cover;
        border: 2px solid #0078D4; /* Viền ảnh */
    }

    /* Thông tin trò chuyện */
    .conversation-info {
        flex-grow: 1;
        width:350px;
        margin-left: 10px;
        margin-right:10px;
        display: flex;
        flex-direction: column;
    }
        /* Tên người trò chuyện */
        .conversation-info strong {
            display: block;
            font-size: 16px;
            margin-bottom: 5px;
            font-weight: 600;
        }

        /* Nội dung tin nhắn */
        .conversation-info p {
            margin: 0;
            color: #555;
            font-size: 14px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            display: -webkit-box;
            -webkit-box-orient: vertical;
            -webkit-line-clamp: 2; /* Hiện tối đa 2 dòng */
        }

        /* Thời gian tin nhắn */
        .conversation-info small {
            display: block;
            font-size: 12px;
            color: #888;
            margin-top: 5px;
        }
        /*Menu-icon*/
        .menu-icon {
            display: flex;
            align-items: center;
            justify-content: center;
            position: relative;
            cursor: pointer;
        }

        .fa-ellipsis-v {
            font-size: 20px; /* Kích thước biểu tượng */
            line-height: 1; /* Đảm bảo biểu tượng không bị nghiêng */
            padding: 5px;
            text-align: center;
            transform: none; /* Đảm bảo không bị nghiêng */
            user-select: none; /* Vô hiệu hóa chọn biểu tượng */
        }

        .menu-options {
            position: absolute;
            top: 100%; /* Vị trí menu ngay bên dưới icon */
            right: 0;
            background: white;
            border: 1px solid #ddd;
            border-radius: 5px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
            display: flex;
            flex-direction: column; /* Sắp xếp các nút theo chiều dọc */
            z-index: 10;
            min-width: 100px; /* Đảm bảo kích thước menu đồng nhất */
        }

        .menu-options.hidden {
            display: none; /* Ẩn menu khi chưa click */
        }

        .menu-options button {
            padding: 10px;
            border: none;
            background: none;
            text-align: left;
            cursor: pointer;
            font-size: 14px;
            width: 100%;
        }
            .menu-options button:hover {
                background-color: #f5f5f5;
            }
    /* Nút Xem Phim Cùng */
    .watch-movie-btn {
        display: inline-block;
        background-color: #0078D4; /* Màu nền xanh */
        color: white;
        font-size: 16px;
        font-weight: bold;
        text-align: center;
        text-decoration: none; /* Bỏ gạch chân */
        border-radius: 5px; /* Bo góc */
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Đổ bóng nhẹ */
        transition: background-color 0.3s ease;
    }

        /* Hiệu ứng khi hover */
        .watch-movie-btn:hover {
            background-color: #005bb5; /* Màu nền khi hover */
        }

        /* Hiệu ứng khi nhấn */
        .watch-movie-btn:active {
            background-color: #004f8c; /* Màu nền khi nhấn */
        }
    /*Hiển thị phim trong modals phim*/
    .movie-selection {
        display: flex;
        flex-wrap: wrap;
        gap: 20px; /* Tăng khoảng cách giữa các tùy chọn phim */
        justify-content: center;
        max-height: 400px; /* Đặt chiều cao tối đa cho container */
    }

    .movie-option {
        text-align: center;
        cursor: pointer;
        border-radius:10px;
        margin-bottom: 20px;
        width: 150px; /* Tăng chiều rộng của từng tùy chọn */
        background-color: RGBA(192, 192, 192, 0.4);
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .movie-option img {
            width: 100%;
            height: auto;
            margin:8px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
            transition: box-shadow 0.3s ease;
            max-height: 200px; /* Tăng chiều cao ảnh để hình ảnh lớn hơn */
        }

        .movie-option:hover {
            transform: scale(1.1); /* Tăng hiệu ứng phóng to khi di chuột */
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3);
        }

        .movie-option span {
            display: block;
            margin-top: 10px;
            font-size: 16px; /* Tăng kích thước font chữ */
            font-weight: bold;
            color: #333;
        }

        .movie-option.selected {
            border: 2px solid #007bff;
            box-shadow: 0 4px 10px rgba(0, 123, 255, 0.3);
        }
    /* Tùy chỉnh modal SweetAlert */
    .swal2-popup {
        width: 80% !important; /* Đặt chiều rộng modal là 80% màn hình (hoặc bạn có thể thay đổi giá trị này theo nhu cầu) */
        max-width: 800px !important; /* Đặt chiều rộng tối đa cho modal */
        padding: 20px !important; /* Tăng padding để nội dung không bị dính vào các cạnh */
    }

    /* Tùy chỉnh nội dung của modal */
    .swal2-title {
        font-size: 24px; /* Tăng kích thước tiêu đề */
    }

    .swal2-content {
        font-size: 16px; /* Tăng kích thước nội dung */
    }

    /* Tùy chỉnh các nút */
    .swal2-confirm, .swal2-cancel {
        font-size: 16px; /* Tăng kích thước chữ cho các nút */
        padding: 10px 20px; /* Tăng kích thước padding của nút */
    }



    /* Thanh cuộn của danh sách cuộc trò chuyện */
    .conversation-list {
        height: 100%;
        overflow-y: auto; /* Thêm thanh cuộn dọc nếu nội dung vượt quá chiều cao */
        max-height: calc(100vh - 130px); /* Chiều cao tối đa, có thể điều chỉnh theo nhu cầu */
    }
        /* Thanh cuộn khi chưa hoạt động */
        .conversation-list::-webkit-scrollbar {
            width: 8px; /* Chiều rộng thanh cuộn */
        }
        .conversation-list::-webkit-scrollbar-track {
            background: transparent; /* Nền trong suốt khi không hoạt động */
        }
        .conversation-list::-webkit-scrollbar-thumb {
            background: rgba(0, 120, 212, 0.3); /* Thanh cuộn mờ khi chưa cuộn */
            border-radius: 10px; /* Bo tròn các góc */
            transition: background-color 0.3s ease; /* Hiệu ứng mờ */
        }
        /* Thanh cuộn khi đang hoạt động */
        .conversation-list:hover::-webkit-scrollbar-thumb {
            background: rgba(0, 120, 212, 0.3);
        }
        .conversation-list::-webkit-scrollbar-corner {
            display: none; /* Ẩn phần giao nhau */
        }
        .conversation-list::-webkit-scrollbar-button {
            display: none; /* Ẩn các nút cuộn */
        }
    .conversation-list {
        scrollbar-width: thin; /* Thanh cuộn mỏng */
        scrollbar-color: rgba(0, 120, 212, 0.3) transparent; /* Màu thanh cuộn và nền khi chưa cuộn */
    }
        .conversation-list:hover {
            scrollbar-color: #0078D4 transparent; /* Màu thanh cuộn khi cuộn */
        }
    /* Định dạng liên kết để nó ở cuối dòng */
    .back-to-home {
        display: block;
        margin-top: 10px; /* Khoảng cách trên */
        margin-bottom: 20px; /* Khoảng cách dưới để không bị chồng chéo */
        padding: 8px 12px; /* Khoảng cách bên trong */
        text-align: center; /* Canh giữa */
        color: #fff; /* Màu chữ */
        text-decoration: none; /* Bỏ gạch chân */
        font-weight: bold; /* In đậm */
        background-color: #0078D4; /* Nền sáng để dễ nhìn */
        border-radius: 5px; /* Bo góc */
        transition: background-color 0.3s ease, color 0.3s ease; /* Hiệu ứng chuyển màu */
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); /* Đổ bóng nhẹ */
    }
        .back-to-home:hover {
            background-color: #0085E3; /* Nền khi hover */
            color: #fff; /* Màu chữ khi hover */
        }
    /* Cửa sổ trò chuyện */
    .chat-window {
        width: -webkit-fill-available;
        display: flex;
        flex-direction: column;
    }

    /* Đầu của cửa sổ trò chuyện */
    .chat-header {
        background-color: #0078D4;
        color: white;
        padding: 10px;
        font-size: 18px;
    }

    .chat-header {
        display: flex;
        align-items: center; /* Canh chỉnh các phần tử theo chiều dọc */
        gap: 10px; /* Khoảng cách giữa các phần tử */
    }

    /* Phần nội dung của cửa sổ trò chuyện */
    .chat-body {
        flex-grow: 1;
        padding: 10px;
        background-color: #f0f0f0;
        overflow-y: auto; /* Thanh cuộn dọc nếu cần */
        height: calc(100% - 50px); /* Để lại khoảng trống cho phần footer */
    }

    .chat-avatar {
        width: 40px; /* Hoặc chiều rộng mong muốn */
        height: 40px; /* Hoặc chiều cao mong muốn */
        border-radius: 50%; /* Để avatar thành hình tròn */
        margin-right: 10px; /* Khoảng cách giữa avatar và tên */
    }
        /* Thanh cuộn của chat-body */
        .chat-body::-webkit-scrollbar {
            width: 8px; /* Chiều rộng của thanh cuộn dọc */
            height: 8px; /* Chiều cao của thanh cuộn ngang */
        }

        .chat-body::-webkit-scrollbar-track {
            background: transparent; /* Nền trong suốt */
        }

        .chat-body::-webkit-scrollbar-thumb {
            background: #0078D4; /* Màu của thanh cuộn */
            border-radius: 10px; /* Bo tròn các góc */
            border: 2px solid transparent; /* Đường viền trong suốt */
        }

        .chat-body::-webkit-scrollbar-corner {
            display: none; /* Ẩn phần giao nhau */
        }

        .chat-body::-webkit-scrollbar {
            width: 8px;
            height: 8px;
        }
        /* Ẩn các mũi tên cuộn (trong trường hợp có) */
        .chat-body::-webkit-scrollbar-button {
            display: none; /* Ẩn các nút cuộn */
        }
    .chat-body {
        scrollbar-width: thin; /* Thanh cuộn mỏng */
        scrollbar-color: #0078D4 transparent; /* Màu thanh cuộn và nền */
    }

    /* Phần footer của cửa sổ trò chuyện */
    .chat-footer {
        padding: 10px;
        display: flex; /* Sử dụng flexbox */
        justify-content: center; /* Căn giữa theo chiều ngang */
        align-items: center; /* Căn giữa theo chiều dọc */
    }

    /* Container chứa textarea và button */
    #chat {
        display: flex; /* Sử dụng flexbox để căn chỉnh các phần tử */
        width: 100%; /* Đảm bảo container chiếm toàn bộ chiều ngang của chat-footer */
    }

        /* Ô nhập liệu */
        #chat textarea {
            flex: 1; /* Cho phép ô nhập liệu chiếm toàn bộ không gian còn lại */
            height: 50px;
            padding: 10px;
            border-radius: 5px;
            border: 1px solid #ddd;
            resize: none; /* Ngăn người dùng thay đổi kích thước ô */
        }

        /* Nút gửi */
        #chat button {
            padding: 10px 20px;
            background-color: #0078D4;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            transition: background-color 0.3s ease;
        }

            #chat button:hover {
                background-color: #005a8e; /* Hiệu ứng khi hover */
            }


    .user-message, .receiver-message {
        padding: 5px;
        margin: 5px 0;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        word-wrap: break-word; /* Ngắt từ để xuống dòng nếu cần */
        word-break: break-all; /* Ngắt từ ở bất kỳ điểm nào để tránh tràn ra ngoài */
        overflow-wrap: break-word; /* Cách khác để ngắt từ */
    }


    /* Tên người gửi */
    .message-sender {
        font-weight: bold;
        margin-bottom: 3px;
    }

    /* Tin nhắn của người dùng */
    .user-message {
        text-align: right;
        background-color: #d0f0c0;
    }

    /* Tin nhắn của người nhận */
    .receiver-message {
        text-align: left;
        background-color: #f0f0f0;
    }

    /* Thời gian tin nhắn chung */
    .message-timestamp {
        font-size: 12px;
        color: #888;
        margin-top: 5px;
    }

    /* Đối với tin nhắn của người nhận */
    .receiver-message .message-timestamp {
        text-align: left; /* Canh trái */
    }

    .container {
        display: flex;
        justify-content: center; /* Căn giữa theo chiều ngang */
        margin: 10px 0; /* Khoảng cách trên dưới */
    }

    .date-separator {
        text-align: center;
        padding: 5px 10px;
        font-size: 14px;
        color: white;
        background-color: #80808075; /* Nền xám */
        border-radius: 10px;
        font-weight: bold;
    }

    /*Chat*/
    #chat {
        width: 100%;
    }
    #blockuser {
        width:100%;
    }
    .block-message {
        color: #555; /* Màu chữ xám tối */
        padding: 10px; /* Khoảng cách bên trong */
        text-align: center; /* Chữ căn giữa */
        border-radius: 5px; /* Góc bo tròn */
        margin: 10px 0; /* Khoảng cách trên và dưới */
        font-weight: bold; /* Chữ đậm */
        font-size: 14px; /* Kích thước chữ */
    }
    /* CSS cho nút "Hủy chặn" */
    .unblock-btn {
        display: block;
        margin: 10px auto;
        padding: 8px 16px;
        background-color: #0078D4; /* Màu nền nút */
        color: #ffffff; /* Màu chữ */
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        text-align: center;
        transition: background-color 0.3s;
    }

        .unblock-btn:hover {
            background-color: #005bb5; /* Màu nền khi hover */
        }

        .unblock-btn:focus {
            outline: none;
        }
</style>
<!-- SweetAlert2 JS -->
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let currentConversation = null;
    let sendUser = '@ViewBag.CurrentUser';  // Thêm tên người dùng vào ViewBag

    // Khởi tạo kết nối WebSocket
    const socket = new WebSocket('http://localhost:60771/Chats/ConnectWebSocket');  // Đảm bảo URL WebSocket chính xác

    // Khi kết nối WebSocket thành công
    socket.onopen = function () {
        console.log("WebSocket connected.");
    };
    socket.onmessage = function (event) {
        const message = JSON.parse(event.data);  // Parse JSON from server
        const chatBody = document.getElementById("chatBody");

        if (message.type === "chat") {
            // Xử lý tin nhắn thông thường
            if (message.receiverUsername === currentConversation || message.senderUsername === currentConversation) {
                let messageContainer = document.createElement("div");
                messageContainer.classList.add(message.senderUsername === sendUser ? "user-message" : "receiver-message");

                let senderNameElement = document.createElement("div");
                senderNameElement.classList.add("message-sender");
                senderNameElement.innerText = message.senderName;

                let messageContentElement = document.createElement("div");
                // Chuyển tin nhắn có link thành liên kết có thể nhấp
                messageContentElement.innerHTML = parseLinks(message.content); // Thay vì innerText, sử dụng innerHTML

                let messageTimestampElement = document.createElement("div");
                messageTimestampElement.classList.add("message-timestamp");

                const messageTime = new Date(message.timestamp);
                messageTimestampElement.innerText = messageTime.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' });

                messageContainer.appendChild(senderNameElement);
                messageContainer.appendChild(messageContentElement);
                messageContainer.appendChild(messageTimestampElement);

                chatBody.appendChild(messageContainer);
                chatBody.scrollTop = chatBody.scrollHeight;
            }
        } else if (message.type === "blockNotification") {
            // Các hàm gọi lại khác nếu cần
            checkBlockStatus(currentConversation);
        }
        else if (message.type === "unblockNotification") {
            // Các hàm gọi lại khác nếu cần
            checkBlockStatus(currentConversation);
        }
        else if (message.type === "movieInvite") {
            // Hiển thị lời mời xem phim cho người nhận
            Swal.fire({
                title: `${message.senderUsername} mời bạn xem phim '${message.movieName}' cùng!`,
                text: 'Bạn có muốn chấp nhận lời mời này?',
                icon: 'info',
                showCancelButton: true,
                confirmButtonText: 'Chấp nhận',
                cancelButtonText: 'Từ chối',
            }).then((result) => {
                if (result.isConfirmed) {
                    // Gửi phản hồi đồng ý mời
                    const acceptInviteMessage = {
                        type: "movieInviteResponse",
                        receiverUsername: message.receiverUsername,
                        senderUsername: message.senderUsername,
                        response: "accepted",
                        movieName: message.movieName
                    };

                    socket.send(JSON.stringify(acceptInviteMessage));
                    Swal.fire('Lời mời đã được chấp nhận!', '', 'success')
                        .then(() => {
                            // Sau khi thông báo được đóng, chuyển hướng đến trang WatchTogether
                            window.location.href = `/chats/WatchTogether?senderUsername=${message.senderUsername}&receiverUsername=${message.receiverUsername}&PhimSeXem=${message.movieName}&idPhim=${message.idPhim}`;
                        });
                } else {
                    // Gửi phản hồi từ chối mời
                    const declineInviteMessage = {
                        type: "movieInviteResponse",
                        receiverUsername: message.receiverUsername,
                        senderUsername: message.senderUsername,
                        response: "declined",
                        movieName: message.movieName
                    };

                    socket.send(JSON.stringify(declineInviteMessage));
                    Swal.fire('Lời mời đã bị từ chối!', '', 'info');
                }
            });
        }
        loadConversations();
        loadMessages(currentConversation);
    };
    // Khi WebSocket đóng
    socket.onclose = function () {
        console.log("WebSocket closed.");
    };
    // Khi có lỗi với WebSocket
    socket.onerror = function (error) {
        console.log("WebSocket Error: " + error);
    };
    function openConversation(user2, hoten, anh) {
        currentConversation = user2;

        // Lấy thông tin người dùng và avatar
        const chatTitleElement = document.getElementById("chatTitle");
        const chatHeader = document.getElementById("chatHeader");

        // Tạo avatar và liên kết
        const avatarLink = document.createElement("a");
        avatarLink.href = `/Chats/Profiles?username=${user2}`;
        avatarLink.target = "_blank";

        const avatarElement = document.createElement("img");
        avatarElement.classList.add("chat-avatar");
        avatarElement.src = `/Uploads/${anh}`;
        avatarLink.appendChild(avatarElement);

        chatHeader.innerHTML = '';
        chatHeader.appendChild(avatarLink);

        chatTitleElement.innerText = hoten;

        // Xóa nội dung tin nhắn cũ
        document.getElementById("chatBody").innerHTML = '';
        checkBlockStatus(user2); // Gọi hàm kiểm tra trạng thái chặn
    }
    function checkBlockStatus(user2) {
        fetch(`/Chats/CheckBlockStatus?ReceiverUserName=${user2}&SenderUsername=${sendUser}`)
            .then(response => response.json())
            .then(data => {
                const chat = document.getElementById("chat");
                const chatFooter = document.querySelector('.chat-footer');
                const blockuser = document.getElementById("blockuser");

                if (data.success && data.daChan && data) {
                    toggleChatFooter(true);

                    // Làm trống nội dung
                    blockuser.innerHTML = '';
                    chat.innerHTML = '';

                    // Kiểm tra nếu người gửi bị chặn hoặc người nhận bị chặn
                    if (data.blockDirection === sendUser) {
                        // Nếu người gửi bị chặn
                        const unblockButton = document.createElement("button");
                        unblockButton.textContent = "Hủy chặn";
                        unblockButton.classList.add("unblock-btn");
                        unblockButton.onclick = () => {
                            unblockUser(user2);
                        };
                        blockuser.appendChild(unblockButton);
                        // Tạo thông báo chặn
                        const blockMessageElement = document.createElement("p");
                        blockMessageElement.textContent = data.message;
                        blockMessageElement.classList.add("block-message");

                        // Thêm phần tử vào giao diện
                        blockuser.appendChild(blockMessageElement);

                        chatFooter.style.backgroundColor = "#d3d3d3"; // Màu xám nhạt
                    } else if (data.blockDirection === user2) {
                        // Tạo thông báo chặn
                        const blockMessageElement = document.createElement("p");
                        blockMessageElement.textContent = data.message;
                        blockMessageElement.classList.add("block-message");

                        // Thêm phần tử vào giao diện
                        blockuser.appendChild(blockMessageElement);
                        // Nếu người nhận bị chặn
                        chatFooter.style.backgroundColor = "#d3d3d3"; // Màu xám nhạt
                    }
                } else {
                    toggleChatFooter(true);

                    // Làm trống nội dung
                    blockuser.innerHTML = '';
                    chat.innerHTML = '';

                    // Thêm lại phần nhập tin nhắn
                    chat.innerHTML = `
                        <textarea id="messageContent" placeholder="Gõ tin nhắn..."></textarea>
                        <button onclick="sendMessage()" style="background: none; border: none; cursor: pointer;">
                            <i class="fas fa-paper-plane" style="font-size: 24px; color: #0078D4;"></i>
                        </button>
                    `;
                    // Thay nền xám
                    chatFooter.style.backgroundColor = "#fff";
                }
                console.log(data);

                // Tải tin nhắn bất kể trạng thái chặn
                loadMessages(user2);
            })
            .catch(error => {
                console.error("Error checking block status:", error);
            });
    }
    window.onload = function () {
        toggleChatFooter(false); // Hide chat footer by default
    };
    const messageInput = document.getElementById("messageContent");
    messageInput.addEventListener("keydown", function (event) {
        // Kiểm tra nếu nhấn Shift + Enter
        if (event.key === "Enter" && event.shiftKey) {
            // Thêm dòng mới mà không gửi tin nhắn
            return;
        }

        // Kiểm tra nếu chỉ nhấn Enter
        if (event.key === "Enter") {
            event.preventDefault(); // Ngăn xuống dòng mặc định
            sendMessage(); // Gọi hàm gửi tin nhắn
        }
    });
    // Function to toggle the visibility of the chat footer
    function toggleChatFooter(isVisible) {
        const chatFooter = document.querySelector('.chat-footer');
        if (isVisible) {
            chatFooter.style.display = 'block';
        } else {
            chatFooter.style.display = 'none';
        }
    }
    function loadMessages(user2) {
        if (user2) {
            // Fetch messages from the server for the selected user
            fetch(`/Chats/GetMessages?receiverUsername=${user2}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Clear the chat body to prepare for new messages
                        const chatBody = document.getElementById("chatBody");
                        chatBody.innerHTML = ''; // Remove old messages

                        // Helper function to format the date
                        function getDateLabel(date) {
                            const today = new Date();
                            const yesterday = new Date(today);
                            yesterday.setDate(today.getDate() - 1);

                            today.setHours(0, 0, 0, 0);
                            yesterday.setHours(0, 0, 0, 0);

                            const dateOnly = new Date(date);
                            dateOnly.setHours(0, 0, 0, 0);

                            if (dateOnly.getTime() === today.getTime()) {
                                return "Hôm nay";
                            } else if (dateOnly.getTime() === yesterday.getTime()) {
                                return "Hôm qua";
                            } else {
                                return `${getShortDayName(dateOnly)} ${dateOnly.toLocaleDateString('vi-VN', {
                                    year: 'numeric',
                                    month: 'long',
                                    day: '2-digit'
                                })}`;
                            }
                        }

                        // Helper function to get short day names
                        function getShortDayName(date) {
                            const dayNames = ['CN', 'T2', 'T3', 'T4', 'T5', 'T6', 'T7'];
                            return dayNames[date.getDay()];
                        }

                        // Check if there are messages to display
                        if (Array.isArray(data.messages) && data.messages.length > 0) {
                            let lastMessageDate = null; // To keep track of the last message date

                            // Loop through each message and create corresponding elements
                            data.messages.forEach(message => {
                                const messageDate = new Date(message.timestamp);

                                // Check if the current message date is a different day from the last message
                                if (!lastMessageDate || messageDate.toDateString() !== lastMessageDate.toDateString()) {
                                    const containerDiv = document.createElement("div");
                                    containerDiv.classList.add("container");

                                    const dateSeparator = document.createElement("div");
                                    dateSeparator.classList.add("date-separator");
                                    dateSeparator.innerText = getDateLabel(message.timestamp);

                                    containerDiv.appendChild(dateSeparator);
                                    chatBody.appendChild(containerDiv);

                                    lastMessageDate = messageDate;
                                }

                                const messageContainer = document.createElement("div");
                                messageContainer.classList.add(
                                    message.senderUsername === sendUser ? "user-message" : "receiver-message"
                                );

                                // Create message content element
                                const messageContentElement = document.createElement("div");
                                // Check if the content is a URL
                                const urlRegex = /(https?:\/\/[^\s]+)/g;
                                const content = message.content;

                                // If it's a URL, convert it to a clickable link
                                if (urlRegex.test(content)) {
                                    messageContentElement.innerHTML = content.replace(urlRegex, '<a href="$&" target="_blank">$&</a>');
                                } else {
                                    messageContentElement.innerText = content;
                                }

                                // Create message timestamp element
                                const messageTimestampElement = document.createElement("div");
                                messageTimestampElement.classList.add("message-timestamp");
                                messageTimestampElement.innerText = messageDate.toLocaleTimeString([], {
                                    hour: '2-digit',
                                    minute: '2-digit'
                                });

                                // If the message is from the receiver, include their name
                                if (message.senderUsername !== sendUser) {
                                    const senderNameElement = document.createElement("div");
                                    senderNameElement.classList.add("message-sender");
                                    senderNameElement.innerText = message.receiverName; // Adjust to correct name
                                    messageContainer.appendChild(senderNameElement);
                                }

                                // Append message content and timestamp to the container
                                messageContainer.appendChild(messageContentElement);
                                messageContainer.appendChild(messageTimestampElement);

                                // Add the container to the chat body
                                chatBody.appendChild(messageContainer);
                            });

                            // Scroll to the bottom of the chat body
                            chatBody.scrollTop = chatBody.scrollHeight;
                        } else {
                            // If no messages are found, show a placeholder
                            console.log("No messages available.");
                            const noMessagesElement = document.createElement("div");
                            noMessagesElement.classList.add("no-messages");
                            noMessagesElement.innerText = "Chưa có tin nhắn nào trong cuộc trò chuyện này.";
                            chatBody.appendChild(noMessagesElement);
                        }
                    } else {
                        console.error("Error loading messages:", data.message);
                    }
                })
                .catch(error => {
                    console.error("Error loading messages:", error);
                });
        } else {
            console.error("Invalid user2.");
        }
    }
    function blockUser(receiverUsername) {
        const senderUsername = sendUser; // Lấy tên người gửi từ biến toàn cục

        // Tạo một thông điệp chặn người dùng
        const blockMessage = {
            type: 'block',  // Chỉ rõ loại thông điệp là chặn
            senderUsername: senderUsername,
            receiverUsername: receiverUsername
        };

        // Gửi thông điệp qua WebSocket
        socket.send(JSON.stringify(blockMessage));

        // Hiển thị thông báo chặn người dùng ngay lập tức (hoặc thông báo thành công)
        Swal.fire({
            icon: 'success',
            title: 'Chặn người dùng thành công!',
            text: `Bạn đã chặn ${receiverUsername}`,
            showConfirmButton: false,
            timer: 1000,
        }).then(() => {
            checkBlockStatus(receiverUsername);
        });
    }
    function unblockUser(receiverUsername) {
        const senderUsername = sendUser;

        // Tạo thông điệp `unblock` để gửi qua WebSocket
        const unblockMessage = {
            type: 'unblock',
            senderUsername: senderUsername,
            receiverUsername: receiverUsername
        };

        // Gửi thông điệp qua WebSocket
        socket.send(JSON.stringify(unblockMessage));

        // Hiển thị thông báo cho người dùng
        Swal.fire({
            icon: 'success',
            title: 'Hủy chặn người dùng thành công!',
            text: `Bạn đã hủy chặn ${receiverUsername}`,
            showConfirmButton: false,
            timer: 1000,
        }).then(() => {
            checkBlockStatus(receiverUsername);
        });
    }
    // Hàm để tải danh sách cuộc trò chuyện từ API
    function loadConversations() {
        fetch(`/Chats/GetConversation?username=${sendUser}`)
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    const conversationList = document.getElementById('conversationList');
                    conversationList.innerHTML = ''; // Xóa danh sách cũ

                    // Thêm các mục trò chuyện vào danh sách
                    data.conversations.forEach(conversation => {
                        const avatar = conversation.avatar || "AnhCN.jpg";
                        const otherUser = sendUser === conversation.user1 ? conversation.hotenuser2 : conversation.hotenuser1;
                        const otherUsername = sendUser === conversation.user1 ? conversation.user2 : conversation.user1;

                        const conversationItem = document.createElement('div');
                        conversationItem.classList.add('conversation-item');
                        conversationItem.innerHTML = `
                            <img src="/Uploads/${avatar}" alt="${otherUser}'s avatar" class="avatar-image">
                            <div class="conversation-info">
                                <strong>${otherUser}</strong>
                                <p>${conversation.contentnew && conversation.contentnew.length > 15
                                ? conversation.contentnew.substring(0, 15) + '...'
                                : (conversation.contentnew || 'Không có nội dung')}</p>
                                <small>${new Date(conversation.lastMessageTimestamp).toLocaleString()}</small>
                            </div>
                                     <!-- Nút Xem Phim Cùng -->
                                    <button class="watch-movie-btn" onclick="openMovieSelection('${otherUsername}', '${otherUser}')">
                                    Xem Phim Cùng
                                </button>
                                 <div class="menu-icon">
                                        <i class="fas fa-ellipsis-v"></i>
                                    <div class="menu-options hidden">
                                        <button class="report-btn">Báo cáo</button>
                                        <button class="block-btn">Chặn</button>
                                    </div>
                                </div>
                        `;

                        // Gắn sự kiện onclick để mở cuộc trò chuyện khi được nhấn
                        conversationItem.onclick = () => openConversation(otherUsername, otherUser, avatar);

                        // Gắn sự kiện để hiện/ẩn menu khi click vào icon ba chấm
                        const menuIcon = conversationItem.querySelector('.fa-ellipsis-v');
                        const menuOptions = conversationItem.querySelector('.menu-options');
                        menuIcon.onclick = (event) => {
                            event.stopPropagation(); // Ngăn không cho sự kiện lan ra ngoài

                            // Đóng tất cả các menu khác trước khi mở menu hiện tại
                            document.querySelectorAll('.menu-options').forEach(menu => {
                                if (menu !== menuOptions) {
                                    menu.classList.add('hidden'); // Đóng menu khác
                                }
                            });

                            // Hiện hoặc ẩn menu hiện tại
                            menuOptions.classList.toggle('hidden');
                        };

                        conversationItem.querySelector('.report-btn').onclick = () => {
                            Swal.fire({
                                title: 'Báo cáo người dùng',
                                input: 'select',
                                inputOptions: {
                                    'Spam/Tin nhắn rác': 'Spam/Tin nhắn rác',
                                    'Lạm dụng/Ngôn ngữ không phù hợp': 'Lạm dụng/Ngôn ngữ không phù hợp',
                                    'Gian lận/Lừa đảo': 'Gian lận/Lừa đảo',
                                    'other': 'Khác (nhập thêm lý do bên dưới)'
                                },
                                inputPlaceholder: 'Chọn một lý do báo cáo',
                                showCancelButton: true,
                                confirmButtonText: 'Tiếp tục',
                                cancelButtonText: 'Hủy',
                                inputValidator: (value) => {
                                    if (!value) {
                                        return 'Bạn cần chọn một lý do!';
                                    }
                                }
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    const selectedReason = result.value;

                                    // Nếu người dùng chọn 'Khác', hiển thị thêm hộp thoại để nhập lý do
                                    if (selectedReason === 'other') {
                                        Swal.fire({
                                            title: 'Nhập lý do báo cáo',
                                            input: 'textarea',
                                            inputLabel: 'Lý do báo cáo',
                                            inputPlaceholder: 'Hãy nhập lý do tại đây...',
                                            showCancelButton: true,
                                            confirmButtonText: 'Gửi',
                                            cancelButtonText: 'Hủy',
                                            inputValidator: (value) => {
                                                if (!value) {
                                                    return 'Bạn cần nhập lý do!';
                                                }
                                            }
                                        }).then((textResult) => {
                                            if (textResult.isConfirmed) {
                                                const userReason = textResult.value.trim();
                                                if (userReason) {
                                                    reportUser(otherUsername, userReason); // Gửi báo cáo với lý do người dùng nhập
                                                }
                                            }
                                        });
                                    } else {
                                        // Gửi báo cáo với lý do đã chọn
                                        reportUser(otherUsername, selectedReason);
                                    }
                                }
                            });
                        };


                        conversationItem.querySelector('.block-btn').onclick = () => {
                            Swal.fire({
                                title: 'Bạn có chắc chắn chặn người dùng này không?',
                                text: `Hành động này sẽ chặn ${otherUser} và bạn sẽ không thể liên lạc với họ nữa.`,
                                icon: 'warning',
                                showCancelButton: true,
                                confirmButtonText: 'Chặn',
                                cancelButtonText: 'Hủy'
                            }).then((result) => {
                                if (result.isConfirmed) {
                                    blockUser(otherUsername); // Gọi hàm chặn người dùng nếu người dùng xác nhận
                                }
                            });
                        };


                        // Thêm mục này vào danh sách
                        conversationList.appendChild(conversationItem);
                    });

                } else {
                    console.error("Failed to load conversations:", data.message);
                }
            })
            .catch(error => {
                console.error("Error loading conversations:", error);
            });
    }
    function openMovieSelection(receiverUsername, receiverName) {
        fetch('/chats/GetMovies')  // Gọi phương thức GetMovies trong controller
            .then(response => response.json())
            .then(data => {
                // Tạo nội dung HTML với các phim và ảnh
                let movieOptionsHtml = '';
                data.forEach(phim => {
                    movieOptionsHtml += `
                        <div class="movie-option" data-id="${phim.idPhim}" data-name="${phim.tenPhim}" style="cursor: pointer; margin-bottom: 10px; text-align: center;">
                        <img src="/Uploads/${phim.hinhAnh}" alt="${phim.tenPhim}" style="width: 100px; height: auto; margin-bottom: 5px;">
                        <div>${phim.tenPhim}</div>
                    </div>
                `;
                });

                // Mở cửa sổ SweetAlert với các tùy chọn phim hiển thị ảnh và ô tìm kiếm
                Swal.fire({
                    title: `Chọn Phim để Xem Cùng ${receiverName}`,
                    html: `
                        <div class="movie-search-container">
                            <input type="text" id="movie-search" placeholder="Tìm kiếm phim..." style="width: 100%; padding: 5px; margin-bottom: 15px;">
                            <div class="movie-selection">
                                ${movieOptionsHtml}
                            </div>
                        </div>
                       `,
                    showCancelButton: true,
                    confirmButtonText: 'Gửi Lời Mời',
                    cancelButtonText: 'Hủy',
                    preConfirm: () => {
                        const selectedMovie = document.querySelector('.movie-option.selected');
                        if (!selectedMovie) {
                            Swal.showValidationMessage('Bạn cần chọn phim!');
                            return false;
                        }
                        // Lấy cả id và tên phim từ thuộc tính dữ liệu
                        const movieId = selectedMovie.getAttribute('data-id');
                        const movieName = selectedMovie.getAttribute('data-name');
                        return { idPhim: movieId, tenPhim: movieName };
                    }
                }).then((result) => {
                    console.log(result);
                    if (result.isConfirmed) {
                        const selectedMovie = result.value;

                        // Gửi lời mời xem phim qua WebSocket
                        const message = {
                            type: "movieInvite",
                            senderUsername: sendUser,  // Tên người gửi
                            receiverUsername: receiverUsername,  // Tên người nhận
                            movieId: selectedMovie.idPhim,  // ID phim đã chọn
                            movieName: selectedMovie.tenPhim  // Tên phim đã chọn
                        };

                        // Kiểm tra người nhận có kết nối WebSocket không
                        fetch(`/chats/checkIfUserOnline?username=${receiverUsername}`)
                            .then(response => response.json())
                            .then(data => {
                                if (data.isOnline) {
                                    socket.send(JSON.stringify(message));
                                    Swal.fire({
                                        title: 'Lời mời đã được gửi!',
                                        text: `Lời mời xem phim '${selectedMovie.tenPhim}' đã được gửi đến ${receiverName}.`,
                                        icon: 'success',
                                        confirmButtonText: 'Đóng'
                                    }).then(() => {
                                        window.location.href = `/chats/WatchTogether?senderUsername=${sendUser}&receiverUsername=${receiverUsername}&PhimSeXem=${selectedMovie.tenPhim}&idPhim=${selectedMovie.idPhim}`;
                                    });
                                } else {
                                    // Nếu người nhận không online, thông báo cho người gửi
                                    Swal.fire({
                                        title: 'Người nhận không online!',
                                        text: `Hiện tại ${receiverName} không online. Lời mời sẽ được gửi khi họ trực tuyến.`,
                                        icon: 'warning',
                                        confirmButtonText: 'Đóng'
                                    });
                                }
                            })
                    }
                });

                // Thêm sự kiện để chọn phim
                document.querySelectorAll('.movie-option').forEach(option => {
                    option.addEventListener('click', () => {
                        document.querySelectorAll('.movie-option').forEach(option => {
                            option.classList.remove('selected'); // Xóa lớp chọn cũ
                        });
                        option.classList.add('selected'); // Thêm lớp chọn cho tùy chọn hiện tại
                    });
                });

                // Thêm chức năng tìm kiếm phim
                const searchInput = document.getElementById('movie-search');
                searchInput.addEventListener('input', () => {
                    const searchTerm = searchInput.value.toLowerCase();
                    const movieOptions = document.querySelectorAll('.movie-option');
                    movieOptions.forEach(option => {
                        const movieTitle = option.querySelector('div').textContent.toLowerCase();
                        if (movieTitle.includes(searchTerm)) {
                            option.style.display = 'block';  // Hiển thị phim nếu tên chứa từ khóa
                        } else {
                            option.style.display = 'none';  // Ẩn phim nếu tên không chứa từ khóa
                        }
                    });
                });

            })
            .catch(error => {
                console.error("Error fetching movies:", error);
                alert("Không thể lấy danh sách phim!");
            });
    }
    function reportUser(username, reason) {
        const senderUsername = sendUser;

        fetch('/Chats/ReportUser', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                NguoiBaoCao: senderUsername, // Thêm thông tin người báo cáo nếu cần
                DoiTuongBaoCao: username,
                LyDoBaoCao: reason
            })
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    Swal.fire({
                        icon: 'success',
                        title: "Đã báo cáo!",
                        text: 'Báo cáo của bạn đã được gửi thành công.'
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Vui lòng đợi!',
                        text: data.message
                    });
                }
            })
            .catch(error => {
                console.error("Error reporting user:", error);
                Swal.fire({
                    icon: 'error',
                    title: 'Lỗi',
                    text: 'Có lỗi xảy ra khi gửi báo cáo.'
                });
            });
    }
    // Gọi loadConversations khi trang tải
    window.onload = function () {
        loadConversations(); // Load danh sách cuộc trò chuyện
        toggleChatFooter(false); // Ẩn footer cửa sổ chat mặc định
    };

    // Gửi tin nhắn qua WebSocket
    async function sendMessage() {
        let messageContent = document.getElementById("messageContent").value;

        // Gửi tin nhắn qua WebSocket
        const message = {
            type: "chat",
            senderUsername: sendUser,  // Thay thế với thông tin người dùng thực tế
            receiverUsername: currentConversation,
            content: messageContent,
            timestamp: new Date().toISOString()  // Thời gian hiện tại
        };

        socket.send(JSON.stringify(message));  // Gửi tin nhắn tới server qua WebSocket

        // Hiển thị tin nhắn đã gửi trong cửa sổ trò chuyện
        let chatBody = document.getElementById("chatBody");
        let messageContainer = document.createElement("div");
        messageContainer.classList.add("user-message");

        // Tạo phần tử hiển thị nội dung tin nhắn (dùng innerHTML thay vì innerText)
        let messageContentElement = document.createElement("div");

        // Kiểm tra xem nội dung có phải là một URL hay không và thay thế URL thành liên kết
        messageContent = messageContent.replace(/(?:https?|ftp):\/\/[^\s]+/g, function (url) {
            return `<a href="${url}" target="_blank">${url}</a>`;  // Chuyển URL thành liên kết có thể nhấp
        });

        messageContentElement.innerHTML = messageContent;  // Sử dụng innerHTML để hiển thị liên kết

        // Tạo phần tử hiển thị thời gian tin nhắn
        let messageTimestampElement = document.createElement("div");
        messageTimestampElement.classList.add("message-timestamp");
        const messageTime = new Date(message.timestamp);
        messageTimestampElement.innerText = messageTime.toLocaleTimeString([], {
            hour: '2-digit',
            minute: '2-digit'
        });

        // Thêm các phần tử vào container tin nhắn
        messageContainer.appendChild(messageContentElement);
        messageContainer.appendChild(messageTimestampElement);

        // Thêm container tin nhắn vào phần tử chat body
        chatBody.appendChild(messageContainer);

        // Cuộn tới cuối cùng khi có tin nhắn mới
        chatBody.scrollTop = chatBody.scrollHeight;

        // Xóa nội dung tin nhắn trong textarea
        document.getElementById("messageContent").value = '';

        // Tải lại danh sách cuộc trò chuyện
        loadConversations();
    }

</script>
