
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - AHTB_TimBanCungGu_MVC</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="/css/trangchu.css?v=1.0" rel="stylesheet" />
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-black">
        <div class="container-fluid">
            <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">AHTB</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav mx-auto">
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="Home" asp-action="Index">Trang chủ</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="Home" asp-action="GioiThieu">Giới thiệu</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="Movies" asp-action="Movies">Phim</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="ThanhToan" asp-action="Premium">Premium</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="TimBanCungGu" asp-action="TrangChu">Tìm bạn cùng gu</a>
                    </li>
                </ul>
                <div class="navbar-icons d-flex align-items-center">
                    <div class="dropdown">
                        <i class="bi bi-bell-fill bell-icon" id="dropdownNotification" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <span id="notificationBadge" class="badge bg-danger position-absolute top-0 start-100 translate-middle" style="display: none;"></span>
                        </i>
                        <ul class="dropdown-menu dropdown-menu-end bg-white" aria-labelledby="dropdownNotification" id="notificationList">
                            <li class="dropdown-item text-center text-muted" id="noNotification">Không có thông báo mới</li>
                        </ul>
                    </div>
                    <div class="dropdown">
                        <i class="bi bi-person-fill person-icon ms-3" id="dropdownAccount" role="button" data-bs-toggle="dropdown" aria-expanded="false"></i>
                        <ul class="dropdown-menu dropdown-menu-end bg-white text-white" aria-labelledby="dropdownAccount">
                            <li><a class="dropdown-item" asp-controller="ThongTinCaNhans" asp-action="Index" asp-route-id="@ViewBag.IdThongTinCaNhan">Thông tin tài khoản</a></li>
                            <li><a class="dropdown-item" asp-area="" asp-controller="Home" asp-action="Logout">Đăng xuất</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </nav>
        <main role="main">
            @RenderBody()
        </main>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const socket = new WebSocket('http://localhost:60771/Admin/ThongTinCaNhans/ConnectWebSocket');

        socket.onmessage = function (event) {
            console.log("Message received: ", event.data);  // In dữ liệu nhận được
            if (event.data) {
                Swal.fire({
                    title: 'Thông Báo',
                    html: event.data,
                    icon: 'warning',
                    confirmButtonText: 'Đóng',
                    timer: 5000, // Tự động đóng sau 5 giây
                    timerProgressBar: true,
                    position: 'center',
                    showConfirmButton: false,
                    customClass: {
                        popup: 'swal2-popup-custom',
                    }
                }).then(() => {
                    // Chuyển hướng về trang đăng nhập sau khi thông báo đóng
                    window.location.href = "/LoginvsRegister/Login";
                });
            } else {
                console.log("Không có dữ liệu trong thông báo.");
            }
        };


        socket.onopen = function () {
            console.log("WebSocket is open.");
        };

        socket.onclose = function () {
            console.log("WebSocket closed.");
        };

        socket.onerror = function (error) {
            console.log("WebSocket error:", error);
        };
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const socketSwipe = new WebSocket("http://localhost:60771/TimBanCungGu/ConnectWebSocket");

            // Khi WebSocket mở kết nối
            socketSwipe.onopen = function () {
                console.log("WebSocket for swipe is open.");
            };

            const notificationList = document.querySelector("#notificationList");
            const notificationBadge = document.querySelector("#notificationBadge");
            let notificationCount = 0; // Số lượng thông báo chưa đọc

            // Lấy danh sách thông báo từ server khi trang tải
            fetch('/TimBanCungGu/GetNotifications')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.notifications.length > 0) {
                        data.notifications.forEach(function (message) {
                            const newNotification = document.createElement("li");
                            newNotification.className = "dropdown-item";

                            // Kiểm tra trạng thái đã đọc của thông báo từ localStorage
                            const isRead = localStorage.getItem(message.text) === "read";

                            if (isRead) {
                                newNotification.classList.add("read"); // Nếu đã đọc, thêm class "read"
                            } else {
                                notificationCount++; // Tăng số lượng thông báo chưa đọc
                            }

                            // Hiển thị nội dung thông báo
                            newNotification.innerHTML = `<a href="#" data-id="${message.text}">${message.text}</a>`;
                            notificationList.prepend(newNotification);
                        });

                        // Cập nhật số lượng thông báo chưa đọc
                        if (notificationCount > 0) {
                            notificationBadge.textContent = notificationCount;
                            notificationBadge.style.display = "inline"; // Hiển thị badge nếu có thông báo chưa đọc
                        } else {
                            notificationBadge.style.display = "none"; // Ẩn badge nếu không có thông báo chưa đọc
                        }
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi lấy thông báo từ MongoDB:", error);
                });

            // Khi nhận được tin nhắn mới từ WebSocket
            socketSwipe.onmessage = function (event) {
                try {
                    const message = JSON.parse(event.data);

                    // Tạo thông báo mới
                    const newNotification = document.createElement("li");
                    newNotification.className = "dropdown-item";
                    newNotification.innerHTML = `<a href="#" data-id="${message.userName}">${message.userName} đã matched với bạn!</a>`;

                    // Thêm thông báo mới vào đầu danh sách
                    notificationList.prepend(newNotification);

                    // Tăng số lượng thông báo chưa đọc
                    notificationCount++;
                    notificationBadge.textContent = notificationCount; // Cập nhật số thông báo
                    notificationBadge.style.display = "inline"; // Hiển thị badge nếu có thông báo chưa đọc

                } catch (error) {
                    console.error("Lỗi xử lý tin nhắn:", error);
                }
            };

            // Khi người dùng bấm vào thông báo
            notificationList.addEventListener("click", function (e) {
                if (e.target && e.target.tagName === "A") {
                    const notificationText = e.target.getAttribute("data-id");

                    // Đánh dấu thông báo này là đã đọc và lưu vào localStorage
                    localStorage.setItem(notificationText, "read");

                    // Cập nhật lại badge
                    notificationCount--;
                    notificationBadge.textContent = notificationCount;
                    if (notificationCount === 0) {
                        notificationBadge.style.display = "none"; // Ẩn badge nếu không còn thông báo chưa đọc
                    }

                    // Thêm class "read" cho thông báo đã được đọc
                    e.target.parentElement.classList.add("read");
                }
            });

            // Khi WebSocket bị đóng
            socketSwipe.onclose = function () {
                console.log("WebSocket for swipe closed.");
            };

            // Khi có lỗi xảy ra
            socketSwipe.onerror = function (error) {
                console.log("WebSocket for swipe error:", error);
            };

            // Đặt sự kiện click cho dropdown notification để reset số thông báo
            document.querySelector("#dropdownNotification").addEventListener("click", () => {
                // Reset số thông báo về 0
                notificationCount = 0;
                notificationBadge.textContent = ""; // Xóa số hiển thị
                notificationBadge.style.display = "none"; // Ẩn badge

                // Xóa thông báo "Không có thông báo mới" nếu có
                const noNotification = document.querySelector("#noNotification");
                if (noNotification) {
                    noNotification.remove();
                }

                // Đánh dấu tất cả thông báo là đã đọc trong localStorage
                const allNotifications = notificationList.querySelectorAll("a");
                allNotifications.forEach(notification => {
                    const notificationText = notification.getAttribute("data-id");
                    localStorage.setItem(notificationText, "read"); // Đánh dấu là đã đọc
                    notification.parentElement.classList.add("read"); // Thêm class "read"
                });
            });
        });
     <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        window.onload = function () {
            const userInfo = {
                gioiTinh: '@(ViewBag.GioiTinh ?? "")', // Thêm giá trị mặc định là chuỗi rỗng nếu null
                hoTen: '@(ViewBag.HoTen ?? "")',
                IdThongTinCaNhan: '@(ViewBag.IdThongTinCaNhan ?? "")'
            };

            console.log(userInfo); // Kiểm tra giá trị

            // Kiểm tra xem người dùng đã xem thông báo chưa bằng sessionStorage
            if ((!userInfo.gioiTinh || !userInfo.hoTen) && !sessionStorage.getItem('seenUpdatePrompt')) {
        @if (ViewBag.GioiTinh == null || ViewBag.HoTen == null)
        {
            <text>
                        Swal.fire({
                            title: 'Cập nhật thông tin',
                            text: 'Bạn cần cập nhật Giới tính và Họ tên để tiếp tục sử dụng dịch vụ.',
                            icon: 'warning',
                            confirmButtonText: 'Cập nhật ngay', // Giữ nút "Cập nhật ngay"
                            showCancelButton: false,
                            allowOutsideClick: false,
                            position: 'center', // Hiển thị ở giữa màn hình
                        }).then((result) => {
                            if (result.isConfirmed) {
                                // Lưu vào sessionStorage để ngừng hiển thị thông báo sau khi chuyển trang
                                sessionStorage.setItem('seenUpdatePrompt', 'true');
                                window.location.href = `/ThongTinCaNhans/Edit/${userInfo.IdThongTinCaNhan}`;
                            }
                        });
            </text>
        }
            }
        };
    
    </script>



    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
