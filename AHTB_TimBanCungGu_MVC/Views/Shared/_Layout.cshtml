<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - AHTB_TimBanCungGu_MVC</title>
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons/font/bootstrap-icons.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <link href="/css/trangchu.css?v=1.0" rel="stylesheet" />
</head>
<style>
    /* Khoảng cách từ nội dung xuống navbar */
    body {
        padding-top: 50px; /* Cách từ phần nội dung đầu tiên đến navbar */
    }

    /* Navbar trong suốt hoàn toàn */
    .navbar {
        background-color: transparent; /* Nền hoàn toàn trong suốt */
        border-bottom: none; /* Không có đường viền dưới */
        box-shadow: none; /* Không có bóng */
        transition: background-color 0.3s ease-in-out; /* Hiệu ứng chuyển đổi nền */
        padding: 1px 10px; /* Giảm chiều cao navbar thêm nữa */
        position: fixed; /* Đặt navbar cố định */
        top: 0;
        left: 0;
        width: 100%;
        z-index: 9999;
    }

        /* Khi cuộn xuống, navbar sẽ có nền đậm hơn */
        .navbar.scrolled {
            background-color: rgba(0, 0, 0, 0.8); /* Nền đen đậm hơn khi cuộn */
        }

    /* Các liên kết trong navbar */
    .navbar-nav {
        margin-left: auto;
        display: flex;
        justify-content: flex-end;
        align-items: center;
    }

        /* Liên kết trong navbar */
        .navbar-nav .nav-link {
            color: white; /* Màu chữ mặc định */
            margin: 0 20px;
            font-size: 15px;
            font-weight: 500;
            position: relative; /* Để hiệu ứng underline hoạt động */
            transition: color 0.3s;
        }

    /* Hiệu ứng underline (dấu chân) khi hover */
    .nav-link::after {
        content: "";
        position: absolute;
        width: 0;
        height: 2px;
        background-color: #ff5733; /* Màu gạch dưới */
        left: 50%;
        bottom: -5px;
        transition: all 0.3s ease-in-out;
        transform: translateX(-50%);
    }

    /* Mở rộng dấu chân khi hover */
    .nav-link:hover::after {
        width: 100%; /* Mở rộng dấu chân khi hover */
    }

    /* Kích thước và hiệu ứng cho biểu tượng trong navbar */
    .navbar-icons .bi {
        font-size: 1.8rem;
        color: white;
        cursor: pointer;
        transition: transform 0.3s ease-in-out;
    }

        /* Hiệu ứng hover cho biểu tượng */
        .navbar-icons .bi:hover {
            transform: scale(1.2);
            color: #ff5733;
        }

</style>
<body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-black">
        <div class="container-fluid">
            <a class="navbar-brand" asp-area="" asp-controller="Home" asp-action="Index">AHTB</a>
            <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
                <span class="navbar-toggler-icon"></span>
            </button>
            <div class="collapse navbar-collapse" id="navbarNav">
                <ul class="navbar-nav mx-auto">
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="Home" asp-action="Index">Trang chủ</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="Home" asp-action="GioiThieu">Giới thiệu</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="Movies" asp-action="Movies">Phim</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="ThanhToan" asp-action="Premium">Premium</a>
                    </li>
                    <li class="nav-item">
                        <a class="nav-link text-white" asp-area="" asp-controller="TimBanCungGu" asp-action="TrangChu">Tìm bạn cùng gu</a>
                    </li>
                </ul>
                <div class="navbar-icons d-flex align-items-center">
                    <div class="dropdown">
                        <i class="bi bi-bell-fill bell-icon" id="dropdownNotification" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                            <span id="notificationBadge" class="badge bg-danger position-absolute top-0 start-100 translate-middle" style="display: none;"></span>
                        </i>
                        <ul class="dropdown-menu dropdown-menu-end bg-white" aria-labelledby="dropdownNotification" id="notificationList">

                        </ul>
                    </div>
                    <div class="dropdown">
                        <i class="bi bi-person-fill person-icon ms-3" id="dropdownAccount" role="button" data-bs-toggle="dropdown" aria-expanded="false"></i>
                        <ul class="dropdown-menu dropdown-menu-end bg-white text-white" aria-labelledby="dropdownAccount">
                            <li><a class="dropdown-item" asp-controller="ThongTinCaNhans" asp-action="Index">Thông tin tài khoản</a></li>
                            <li><a class="dropdown-item" asp-area="" asp-controller="Home" asp-action="Logout">Đăng xuất</a></li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    </nav>
        <main role="main">
            @RenderBody()
        </main>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
        const socket = new WebSocket('http://localhost:60771/Admin/ThongTinCaNhans/ConnectWebSocket');

        socket.onmessage = function (event) {
            console.log("Message received: ", event.data);  // In dữ liệu nhận được
            if (event.data) {
                Swal.fire({
                    title: 'Thông Báo',
                    html: event.data,
                    icon: 'warning',
                    confirmButtonText: 'Đóng',
                    timer: 5000, // Tự động đóng sau 5 giây
                    timerProgressBar: true,
                    position: 'center',
                    showConfirmButton: false,
                    customClass: {
                        popup: 'swal2-popup-custom',
                    }
                }).then(() => {
                    // Chuyển hướng về trang đăng nhập sau khi thông báo đóng
                    window.location.href = "/LoginvsRegister/Login";
                });
            } else {
                console.log("Không có dữ liệu trong thông báo.");
            }
        };


        socket.onopen = function () {
            console.log("WebSocket is open.");
        };

        socket.onclose = function () {
            console.log("WebSocket closed.");
        };

        socket.onerror = function (error) {
            console.log("WebSocket error:", error);
        };
    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const socketSwipe = new WebSocket("ws://localhost:60771/TimBanCungGu/ConnectWebSocket");

            // Khi WebSocket mở kết nối
            socketSwipe.onopen = function () {
                console.log("WebSocket for swipe is open.");
            };

            const notificationList = document.querySelector("#notificationList");
            const notificationBadge = document.querySelector("#notificationBadge");
            let notificationCount = 0; // Số lượng thông báo chưa đọc

            // Lấy danh sách thông báo và số lượng thông báo chưa đọc
            fetch('/TimBanCungGu/GetNotifications')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.notifications.length > 0) {
                        data.notifications.forEach(function (message) {
                            const newNotification = document.createElement("li");
                            newNotification.className = "dropdown-item";
                            newNotification.innerHTML = `${message.sender} ${message.text}`;
                            notificationList.prepend(newNotification);
                        });

                        // Cập nhật số lượng thông báo chưa đọc
                        if (data.unreadCount > 0) {
                            notificationCount = data.unreadCount;
                            notificationBadge.textContent = notificationCount;
                            notificationBadge.style.display = "inline"; // Hiển thị badge nếu có thông báo chưa đọc
                        } else {
                            notificationBadge.style.display = "none"; // Ẩn badge nếu không có thông báo chưa đọc
                        }
                    }
                })
                .catch(error => {
                    console.error("Lỗi khi lấy thông báo từ MongoDB:", error);
                });

            // Khi nhận được tin nhắn mới từ WebSocket
            socketSwipe.onmessage = function (event) {
                try {
                    const message = JSON.parse(event.data);

                    if (message.type === "match") {
                        const newNotification = document.createElement("li");
                        newNotification.className = "dropdown-item";
                        newNotification.innerHTML = `${message.hoTen} đã matched với bạn!`;

                        // Thêm thông báo vào đầu danh sách
                        notificationList.prepend(newNotification);

                        // Tăng số lượng thông báo chưa đọc
                        notificationCount++;
                        notificationBadge.textContent = notificationCount; // Cập nhật số lượng
                        notificationBadge.style.display = "inline"; // Hiển thị biểu tượng thông báo
                    }
                } catch (error) {
                    console.error("Error handling message:", error);
                }
            };

            // Khi người dùng bấm vào chuông để xem thông báo
            document.querySelector("#dropdownNotification").addEventListener("click", () => {
                if (notificationCount > 0) {
                    // Đặt tất cả thông báo là đã đọc khi bấm vào chuông
                    fetch('/TimBanCungGu/MarkAllNotificationsAsRead', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    })
                        .then(response => response.json())
                        .then(result => {
                            if (result.success) {
                                notificationBadge.textContent = ""; // Xóa số hiển thị
                                notificationBadge.style.display = "none"; // Ẩn badge
                                notificationCount = 0;

                                // Cập nhật giao diện các thông báo là đã đọc
                                const allNotifications = notificationList.querySelectorAll("li");
                                allNotifications.forEach(notification => {
                                    notification.classList.add("read"); // Thêm class "read"
                                });
                            }
                        })
                        .catch(error => console.error("Lỗi khi đánh dấu tất cả thông báo là đã đọc:", error));
                }
            });

            // Khi WebSocket bị đóng
            socketSwipe.onclose = function () {
                console.log("WebSocket for swipe closed.");
            };

            // Khi có lỗi xảy ra
            socketSwipe.onerror = function (error) {
                console.log("WebSocket for swipe error:", error);
            };
        });
    </script>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    @await RenderSectionAsync("Scripts", required: false)
</body>
</html>
