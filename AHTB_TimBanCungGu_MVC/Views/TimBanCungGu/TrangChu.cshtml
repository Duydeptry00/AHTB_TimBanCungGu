
@{
    ViewData["Title"] = "TrangChu";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@using System.Linq
@using AHTB_TimBanCungGu_API.ViewModels
@model IEnumerable<InfoNguoiDung>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tinder Swipe Page</title>
    <link href="~/css/trangchutbcg.css" rel="stylesheet" />
<style>
    uul>lii {
        padding-top : 30px;
    }
        /* Menu bên trái */
        .menu-container {
            flex: 1; /* Tự động chiếm không gian còn lại trong hàng */
            max-width: 260px; /* Giới hạn chiều rộng tối đa */
            min-width: 180px; /* Giới hạn chiều rộng tối thiểu để tránh bị co quá nhỏ */
            background: rgb(55,54,54);
            background: linear-gradient(0deg, rgba(55,54,54,0) 23%, rgba(255,0,0,1) 100%);
            padding: 20px;
            position : absolute;
            margin-left : 0px;
            height : 650px;

        }
            .menu-container ul {
                list-style: none;
                padding: 0;
                margin: 0;
            }

            .menu-container li {
                margin: 30px 0;
            }

            .menu-container a {
                text-decoration: none;
                color: #fff;
                font-size: 18px;
                font-weight: bold;
                transition: color 0.3s ease;
            }

                .menu-container a:hover {
                    color: #ffdd57; /* Màu vàng nhấn khi hover */
                }
    /* Khung chứa tổng thể */
        .main-container {
            flex: 3; /* Phần chính chiếm diện tích lớn hơn */
            max-width: 1000px; /* Không vượt quá chiều rộng nhất định */
            display: flex;
            flex-direction: row;
            flex-wrap: wrap; /* Cho phép xuống hàng khi không đủ chỗ */
            gap: 20px;
            margin-left : 300px;
            margin-top : 100px;
        }
    /* Card và khung chi tiết */
    .card-container, .details-container {
        flex: 1;
        max-width: 400px;
        background-color: #f9f9f9;
        border-radius: 15px;
        box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15); /* Bóng đổ đẹp hơn, sâu hơn */
        display: flex;
        flex-direction: column;
        overflow: hidden;
        position: relative;
        transition: transform 0.4s ease, opacity 0.4s ease; /* Hiệu ứng chuyển động mượt mà */
    }

    /* Hiệu ứng hover cho card */
    .card-container:hover {
        transform: scale(1.05); /* Hiệu ứng phóng to khi hover */
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.25); /* Bóng đổ mạnh hơn khi hover */
    }

    /* Styling hình ảnh trong card */
        .card {
            display: flex;
            flex-direction: column;
            height: 100%; /* Chiều cao đầy đủ để đảm bảo card co giãn đúng */
        }

    .card img {
        width: 100%;
        height: 400px;
        object-fit: cover;
        border-radius: 15px 15px 0 0;
        transition: transform 0.3s ease; /* Hiệu ứng zoom cho hình ảnh */
    }

    /* Hiệu ứng phóng to hình ảnh khi hover */
    .card-container:hover img {
        transform: scale(1.1); /* Phóng to hình ảnh khi hover */
    }

    /* Khung chứa các icon Like/Dislike */
        .icons {
            display: flex;
            justify-content: space-around;
            padding: 12px 0;
            border-top: 1px solid #e5e5e5;
            background-color: #f7f7f7;
            margin-top: auto; /* Đảm bảo các nút ở cuối card */
        }

    .icons button {
        background: none;
        border: none;
        cursor: pointer;
        outline: none;
        transition: transform 0.3s ease, opacity 0.3s ease;
    }

    /* Hiệu ứng hover cho các icon */
    .icons button:hover {
        transform: scale(1.2);
        opacity: 0.8; /* Tạo hiệu ứng mờ khi hover */
    }

    .icons img {
        width: 50px;
        height: 50px;
        display: block;
    }

    /* Cải tiến cho phần chi tiết */
    .details-container {
        padding: 25px;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        height: auto;
        font-size: 18px;
        color: #333;
        background: #fff;
        opacity: 0; /* Bắt đầu ẩn */
        animation: fadeIn 0.5s forwards; /* Hoạt ảnh mượt mà khi xuất hiện */
    }

    /* Tiêu đề phần chi tiết */
    .details-container h2 {
        margin-top: 0;
        font-size: 32px;
        color: #007bff;
        font-weight: bold;
    }

    .details-container p {
        margin: 10px 0;
        line-height: 1.6;
        color: #555;
    }

        .info {
            margin-top: auto; /* Đẩy phần thông tin lên để các nút Like/Dislike luôn ở cuối */
            padding: 20px; /* Thêm padding để tạo khoảng cách giữa nội dung và nút */
            text-align: center;
        }

    /* Phần hình ảnh bổ sung */
    .images {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
        justify-content: space-between;
        margin-top: 20px;
    }

    .images img {
        width: 120px;
        height: 160px;
        border-radius: 10px;
        object-fit: cover;
        transition: transform 0.3s ease; /* Hiệu ứng zoom cho hình ảnh */
    }

    .images img:hover {
        transform: scale(1.05); /* Hiệu ứng phóng to khi hover */
    }
</style>

</head>
<body>
    <div class="row tbcg">
        <div class="menu-container col-md-3 col-12">
            <ul class="uul">
                <li class="lii"><a href="#thongtin">Hồ sơ cá nhân</a></li>
                <li class="lii"><a href="#nhantin">Nhắn tin</a></li>
                <li class="lii"><a href="#danhsach">Danh sách người thích</a></li>
                <li class="lii"><a href="#soluot" >Số lượt vuốt còn lại : <span id="swipeCount">@ViewBag.SwipeCount</span></a></li>
            </ul>
        </div>
        <div class="main-container col-md-9 col-12">

            @for (int i = 0; i < Model.Count(); i++)
            {
                var thongTin = Model.ElementAt(i);
                <div class="card-container" data-index="@i" style="display:@(i == 0 ? "block" : "none")" data-userid="@thongTin.IDProfile">
                    <div class="card">
                        @if (thongTin.HinhAnh != null && thongTin.HinhAnh.Count > 0)
                        {
                            <img src="/uploads/@thongTin.HinhAnh[0]" alt="Ảnh cá nhân" class="profile-image" />
                        }
                        else
                        {
                            <img src="/Image/timbancunggu/x-icon.png" alt="Ảnh mặc định" class="profile-image" />
                        }

                        <div class="info">
                            <h2>@thongTin.HoTen</h2>
                            <p>@thongTin.MoTa</p>
                        </div>
                        <div class="icons">
                            <button class="dislike">
                                <img src="https://cdn-icons-png.flaticon.com/512/1828/1828778.png" alt="Dislike">
                            </button>
                            <button class="like">
                                <img src="https://cdn-icons-png.flaticon.com/512/833/833472.png" alt="Like">
                            </button>
                        </div>
                    </div>
                </div>

                <div class="details-container" data-index="@i" style="display:@(i == 0 ? "block" : "none")">
                    <h2>Thông tin chi tiết</h2>
                    <p><strong>Tên:</strong> @thongTin.HoTen</p>
                    <p><strong>Giới tính:</strong> @thongTin.GioiTinh</p>
                    <p><strong>Ngày sinh:</strong> @thongTin.NgaySinh.ToString("dd/MM/yyyy")</p>
                    <p><strong>Gu phim:</strong> Hành động, Lãng mạn</p>
                    <div class="images">
                        @if (thongTin.HinhAnh != null && thongTin.HinhAnh.Count > 1)
                        {
                            @for (int j = 1; j < thongTin.HinhAnh.Count; j++)
                            {
                                <img src="/uploads/@thongTin.HinhAnh[j]" alt="Hobby @j">
                            }
                        }
                        else
                        {
                            <p>Không có hình ảnh phụ.</p>
                        }
                    </div>
                </div>
            }
        </div>
    </div>
   

</body>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        const dislikeButtons = document.querySelectorAll(".dislike");
        const likeButtons = document.querySelectorAll(".like");
        const cardContainers = document.querySelectorAll(".card-container");
        const detailsContainers = document.querySelectorAll(".details-container");
        let swipeCount = parseInt(document.getElementById("swipeCount").textContent);

        async function sendSwipeAction(userId2, action) {
            if (!userId2) {
                console.error("Không tìm thấy ID người dùng.");
                return;
            }
            try {
                const response = await fetch('/TimBanCungGu/LuuSwipeAction', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ userId2, action })
                });

                const result = await response.json();
                if (result.success) {
                    // Nếu hành động thành công, ẩn thẻ người dùng và giảm lượt vuốt
                    hideCard(userId2);
                    updateSwipeCount();
                } else {
                    console.error(result.message);
                }
            } catch (error) {
                console.error('Lỗi khi gọi API:', error);
            }
        }

        function updateSwipeCount() {
            if (swipeCount > 0) {
                swipeCount -= 1;
                document.getElementById("swipeCount").textContent = swipeCount;
            }

            // Nếu hết lượt, hiện thông báo và khóa các nút
            if (swipeCount <= 0) {
                alert("Bạn đã hết lượt vuốt!");
                disableSwipeButtons();
            }
        }

        function disableSwipeButtons() {
            const buttons = document.querySelectorAll(".like, .dislike");
            buttons.forEach(button => button.disabled = true);
        }

        // Hàm ẩn thẻ người dùng
        function hideCard(userId2) {
            const matchedCard = document.querySelector(`[data-userid="${userId2}"]`);
            if (matchedCard) {
                matchedCard.style.display = "none"; // Ẩn thẻ người dùng đã like hoặc dislike
            }
        }

        // Hàm xử lý swipe
        function swipeCard(index, direction, action) {
            const currentCard = cardContainers[index];
            const currentDetails = detailsContainers[index];

            // Lấy UserID từ dữ liệu của thẻ
            const userId2 = currentCard.dataset.userid;

            // Gửi hành động swipe cho "Dislike", không gửi cho "Like"
            if (action === "Dislike" || action === "Like") {
                sendSwipeAction(userId2, action);
            }

            // Thêm animation
            currentCard.style.transform = `translateX(${direction}%)`;
            currentCard.style.opacity = "0";
            currentDetails.style.opacity = "0";

            setTimeout(() => {
                currentCard.style.display = "none";
                currentDetails.style.display = "none";
                showNextCard(index);
            }, 500);
        }

        // Hàm hiển thị thẻ tiếp theo
        function showNextCard(index) {
            const nextIndex = index + 1;
            if (nextIndex < cardContainers.length) {
                cardContainers[nextIndex].style.display = "block";
                detailsContainers[nextIndex].style.display = "block";
            } else {
                alert("Bạn đã duyệt hết tất cả!");
            }
        }

        // Xử lý sự kiện khi bấm nút Dislike
        dislikeButtons.forEach((button, index) => {
            button.addEventListener("click", () => swipeCard(index, -150, "Dislike"));
        });

        // Xử lý sự kiện khi bấm nút Like
        likeButtons.forEach((button, index) => {
            button.addEventListener("click", () => swipeCard(index, 150, "Like"));
        });
    });

</script>
<script>
    document.addEventListener("DOMContentLoaded", function () {
        // Lấy thông báo từ TempData
        var message = '@TempData["Message"]';

        if (message) {
            // Giải mã HTML để hiển thị đúng ký tự đặc biệt
            var decodedMessage = decodeHtml(message);

            // Hiển thị thông báo với SweetAlert
            Swal.fire({
                icon: 'warning',
                title: 'Thông báo',
                text: decodedMessage,
                confirmButtonText: 'OK'
            });
        }

        // Hàm giải mã HTML
        function decodeHtml(html) {
            var txt = document.createElement("textarea");
            txt.innerHTML = html;
            return txt.value;
        }
    });
</script>





</html>

